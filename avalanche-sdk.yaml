openapi: "3.0.0"
paths:
    "/v1/health-check":
        get:
            operationId: "glacier-health-check"
            x-speakeasy-group: "glacier.healthCheck"
            summary: "Get the health of the service"
            x-codeSamples: [{"lang": "typescript", "label": "check", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.healthCheck.glacierHealthCheck();\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            responses:
                "200":
                    description: "The Health Check is successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "ok"
                                    "info":
                                        type: "object"
                                        example: {"database": {"status": "up"}}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                    "error":
                                        type: "object"
                                        example: {}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                    "details":
                                        type: "object"
                                        example: {"database": {"status": "up"}}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                "503":
                    description: "The Health Check is not successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "error"
                                    "info":
                                        type: "object"
                                        example: {"database": {"status": "up"}}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                    "error":
                                        type: "object"
                                        example: {"redis": {"status": "down", "message": "Could not connect"}}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                    "details":
                                        type: "object"
                                        example: {"database": {"status": "up"}, "redis": {"status": "down", "message": "Could not connect"}}
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
            tags:
                - "Health Check"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}:reindex":
        post:
            operationId: "reindexNft"
            x-speakeasy-usage-example: {"description": "Specified example for error responses", "tags": ["errors"]}
            x-speakeasy-group: "glacier.nfts"
            x-codeSamples: [{"lang": "typescript", "label": "reindexNft", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  await avalancheSDK.glacier.nfts.reindexNft({\n    address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    tokenId: \"145\",\n  });\n\n  \n}\n\nrun();"}]
            summary: "Reindex NFT metadata"
            description: "Triggers reindexing of token metadata for an NFT token. Reindexing can only be called once per hour for each NFT token."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
                - name: "tokenId"
                  required: true
                  in: "path"
                  description: "TokenId on the contract"
                  example: "145"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "NFTs"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens":
        get:
            operationId: "listTokens"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.nfts"
            x-codeSamples: [{"lang": "typescript", "label": "listTokens", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.nfts.listTokens({\n    pageSize: 10,\n    address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List tokens"
            description: "Lists tokens for an NFT contract."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNftTokens"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "NFTs"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}":
        get:
            operationId: "getTokenDetails"
            x-speakeasy-group: "glacier.nfts"
            summary: "Get token details"
            x-codeSamples: [{"lang": "typescript", "label": "getTokenDetails", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.nfts.getTokenDetails({\n    address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    tokenId: \"145\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets token details for a specific token of an NFT contract."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
                - name: "tokenId"
                  required: true
                  in: "path"
                  description: "TokenId on the contract"
                  example: "145"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/Erc721Token"}
                                    - {"$ref": "#/components/schemas/Erc1155Token"}
                                discriminator:
                                    propertyName: "ercType"
                                    mapping:
                                        "ERC-721": "#/components/schemas/Erc721Token"
                                        "ERC-1155": "#/components/schemas/Erc1155Token"
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "NFTs"
    "/v1/operations/{operationId}":
        get:
            operationId: "getOperationResult"
            x-speakeasy-group: "glacier.operations"
            summary: "Get operation"
            x-codeSamples: [{"lang": "typescript", "label": "getOperationResult", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.operations.getOperationResult({\n    operationId: \"aa22054a-cb7c-4a4e-9b83-59f2ede74138\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets operation details for the given operation id."
            parameters:
                - name: "operationId"
                  required: true
                  in: "path"
                  description: "UUID of given operation"
                  example: "aa22054a-cb7c-4a4e-9b83-59f2ede74138"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/OperationStatusResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Operations"
    "/v1/operations/transactions:export":
        post:
            operationId: "postTransactionExportJob"
            x-speakeasy-group: "glacier.operations"
            summary: "Create transaction export operation"
            x-codeSamples: [{"lang": "typescript", "label": "postTransactionExportJob", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.operations.postTransactionExportJob({\n    type: \"TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING\",\n    firstDate: \"2023-05-01\",\n    lastDate: \"2023-05-02\",\n    startDate: \"2023-05-01\",\n    endDate: \"2023-05-02\",\n    options: {\n      includeChains: [\n        \"p-chain\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Trigger a transaction export operation with given parameters.\n\nThe transaction export operation runs asynchronously in the background. The status of the job can be retrieved from the `/v1/operations/:operationId` endpoint using the `operationId` returned from this endpoint."
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            oneOf:
                                - {"$ref": "#/components/schemas/CreateEvmTransactionExportRequest"}
                                - {"$ref": "#/components/schemas/CreatePrimaryNetworkTransactionExportRequest"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/OperationStatusResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Operations"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}":
        get:
            operationId: "getTxByHash"
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            summary: "Get transaction"
            x-codeSamples: [{"lang": "typescript", "label": "getTxByHash", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.transactions.getTxByHash({\n    blockchainId: \"p-chain\",\n    txHash: \"3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets the details of a single transaction on one of the Primary Network chains."
            parameters:
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "txHash"
                  required: true
                  in: "path"
                  description: "A primary network (P or X chain) transaction hash."
                  example: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/PChainTransaction"}
                                    - {"$ref": "#/components/schemas/XChainNonLinearTransaction"}
                                    - {"$ref": "#/components/schemas/XChainLinearTransaction"}
                                    - {"$ref": "#/components/schemas/CChainExportTransaction"}
                                    - {"$ref": "#/components/schemas/CChainImportTransaction"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Transactions"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions":
        get:
            operationId: "listLatestPrimaryNetworkTransactions"
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listLatestPrimaryNetworkTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.transactions.listLatestPrimaryNetworkTransactions({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    txTypes: [\n      \"AddValidatorTx\",\n    ],\n    startTimestamp: 1689541049,\n    endTimestamp: 1689800249,\n    pageSize: 10,\n    blockchainId: \"p-chain\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List latest transactions"
            description: "Lists the latest transactions on one of the Primary Network chains.\n\nTransactions are filterable by addresses, txTypes, and timestamps. When querying for latest transactions without an address parameter, filtering by txTypes and timestamps is not supported. An address filter must be provided to utilize txTypes and timestamp filters.\n\nGiven that each transaction may return a large number of UTXO objects, bounded only by the maximum transaction size, the query may return less transactions than the provided page size. The result will contain less results than the page size if the number of utxos contained in the resulting transactions reach a performance threshold."
            parameters:
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "txTypes"
                  required: false
                  in: "query"
                  example: ["AddValidatorTx"]
                  description: "Query param for filtering items based on transaction types."
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                - name: "startTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  example: 1689541049
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "endTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  example: 1689800249
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainTransactionsResponse"}
                                    - {"$ref": "#/components/schemas/ListXChainTransactionsResponse"}
                                    - {"$ref": "#/components/schemas/ListCChainAtomicTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Transactions"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking":
        get:
            operationId: "listActivePrimaryNetworkStakingTransactions"
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listActivePrimaryNetworkStakingTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.transactions.listActivePrimaryNetworkStakingTransactions({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    txTypes: [\n      \"AddValidatorTx\",\n    ],\n    startTimestamp: 1689541049,\n    endTimestamp: 1689800249,\n    pageSize: 10,\n    blockchainId: \"p-chain\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List staking transactions"
            description: "Lists active staking transactions on the P-Chain for the supplied addresses."
            parameters:
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "txTypes"
                  required: false
                  in: "query"
                  example: ["AddValidatorTx"]
                  description: "Query param for filtering items based on transaction types."
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                - name: "startTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  example: 1689541049
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "endTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  example: 1689800249
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/PChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPChainTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Transactions"
    "/v1/networks/{network}/rewards:listPending":
        get:
            operationId: "listPendingPrimaryNetworkRewards"
            x-speakeasy-group: "glacier.primaryNetwork.rewards"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listPendingPrimaryNetworkRewards", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.rewards.listPendingPrimaryNetworkRewards({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    pageSize: 10,\n    nodeIds: \"NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List pending rewards"
            description: "Lists pending rewards on the Primary Network for the supplied addresses."
            parameters:
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\". One of addresses or nodeIds is required."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "nodeIds"
                  required: false
                  in: "query"
                  description: "A comma separated list of node ids to filter by. One of addresses or nodeIds is required."
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                  schema:
                    type: "string"
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPendingRewardsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Rewards"
    "/v1/networks/{network}/rewards":
        get:
            operationId: "listHistoricalPrimaryNetworkRewards"
            x-speakeasy-group: "glacier.primaryNetwork.rewards"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listHistoricalPrimaryNetworkRewards", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.rewards.listHistoricalPrimaryNetworkRewards({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    pageSize: 10,\n    nodeIds: \"NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs\",\n    sortOrder: \"asc\",\n    currency: \"usd\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List historical rewards"
            description: "Lists historical rewards on the Primary Network for the supplied addresses."
            parameters:
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\". Optional, but at least one of addresses or nodeIds is required."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "nodeIds"
                  required: false
                  in: "query"
                  description: "A comma separated list of node ids to filter by. Optional, but at least one of addresses or nodeIds is required."
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                  schema:
                    type: "string"
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                - name: "currency"
                  required: false
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  example: "usd"
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListHistoricalRewardsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Rewards"
    "/v1/networks/{network}/blockchains/{blockchainId}/utxos":
        get:
            operationId: "getUtxosByAddresses"
            x-speakeasy-group: "glacier.primaryNetwork.utxos"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "getUtxosByAddresses", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.utxos.getUtxosByAddresses({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    pageSize: 10,\n    blockchainId: \"p-chain\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List UTXOs"
            description: "Lists UTXOs on one of the Primary Network chains for the supplied addresses."
            parameters:
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "assetId"
                  required: false
                  in: "query"
                  description: "Asset ID for any asset (only applicable X-Chain)"
                  schema:
                    type: "string"
                - name: "includeSpent"
                  required: false
                  in: "query"
                  description: "Boolean filter to include spent UTXOs."
                  schema:
                    type: "boolean"
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainUtxosResponse"}
                                    - {"$ref": "#/components/schemas/ListUtxosResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network UTXOs"
    "/v1/networks/{network}/blockchains/{blockchainId}/balances":
        get:
            operationId: "getBalancesByAddresses"
            x-speakeasy-group: "glacier.primaryNetwork.balances"
            summary: "Get balances"
            x-codeSamples: [{"lang": "typescript", "label": "getBalancesByAddresses", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.balances.getBalancesByAddresses({\n    blockTimestamp: 1599696000,\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n    blockchainId: \"p-chain\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets primary network balances for one of the Primary Network chains for the supplied addresses.\n\nC-Chain balances returned are only the shared atomic memory balance. For EVM balance, use the `/v1/chains/:chainId/addresses/:addressId/balances:getNative` endpoint."
            parameters:
                - name: "blockTimestamp"
                  required: false
                  in: "query"
                  description: "An epoch timestamp in seconds. Balance will be calculated at this timestamp."
                  example: "1599696000"
                  schema:
                    type: "integer"
                - name: "addresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainBalancesResponse"}
                                    - {"$ref": "#/components/schemas/ListXChainBalancesResponse"}
                                    - {"$ref": "#/components/schemas/ListCChainAtomicBalancesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Balances"
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}":
        get:
            operationId: "getBlockById"
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            summary: "Get block"
            x-codeSamples: [{"lang": "typescript", "label": "getBlockById", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.blocks.getBlockById({\n    blockchainId: \"p-chain\",\n    blockId: \"5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets a block by block height or block hash on one of the Primary Network chains."
            parameters:
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "blockId"
                  required: true
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  example: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetPrimaryNetworkBlockResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Blocks"
    "/v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks":
        get:
            operationId: "listPrimaryNetworkBlocksByNodeId"
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listPrimaryNetworkBlocksByNodeId", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.blocks.listPrimaryNetworkBlocksByNodeId({\n    pageSize: 10,\n    blockchainId: \"p-chain\",\n    nodeId: \"NodeID-111111111111111111116DBWJs\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List blocks proposed by node"
            description: "Lists the latest blocks proposed by a given NodeID on one of the Primary Network chains."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "nodeId"
                  required: true
                  in: "path"
                  description: "A primary network (P or X chain) nodeId."
                  example: "NodeID-111111111111111111116DBWJs"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Blocks"
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks":
        get:
            operationId: "listLatestPrimaryNetworkBlocks"
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listLatestPrimaryNetworkBlocks", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.blocks.listLatestPrimaryNetworkBlocks({\n    pageSize: 10,\n    blockchainId: \"p-chain\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List latest blocks"
            description: "Lists latest blocks on one of the Primary Network chains."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "p-chain"
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Blocks"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices":
        get:
            operationId: "listLatestXChainVertices"
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listLatestXChainVertices", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.vertices.listLatestXChainVertices({\n    pageSize: 10,\n    blockchainId: \"x-chain\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List vertices"
            description: "Lists latest vertices on the X-Chain."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "x-chain"
                  schema: {"$ref": "#/components/schemas/XChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainVerticesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Vertices"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}":
        get:
            operationId: "getVertexByHash"
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            summary: "Get vertex"
            x-codeSamples: [{"lang": "typescript", "label": "getVertexByHash", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.vertices.getVertexByHash({\n    vertexHash: \"haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr\",\n    blockchainId: \"x-chain\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets a single vertex on the X-Chain."
            parameters:
                - name: "vertexHash"
                  required: true
                  in: "path"
                  description: "A vertex hash string."
                  example: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr"
                  schema:
                    type: "string"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "x-chain"
                  schema: {"$ref": "#/components/schemas/XChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/XChainVertex"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Vertices"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight":
        get:
            operationId: "getVertexByHeight"
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "getVertexByHeight", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.vertices.getVertexByHeight({\n    vertexHeight: 123,\n    pageSize: 10,\n    blockchainId: \"x-chain\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List vertices by height"
            description: "Lists vertices at the given vertex height on the X-Chain."
            parameters:
                - name: "vertexHeight"
                  required: true
                  in: "query"
                  description: "The height of a vertex."
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 123
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "x-chain"
                  schema: {"$ref": "#/components/schemas/XChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainVerticesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Vertices"
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}":
        get:
            operationId: "getAssetDetails"
            x-speakeasy-group: "glacier.primaryNetwork"
            summary: "Get asset details"
            x-codeSamples: [{"lang": "typescript", "label": "getAssetDetails", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.getAssetDetails({\n    blockchainId: \"x-chain\",\n    assetId: \"th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets asset details corresponding to the given asset id on the X-Chain."
            parameters:
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "x-chain"
                  schema: {"$ref": "#/components/schemas/XChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "assetId"
                  required: true
                  in: "path"
                  description: "Asset ID for any asset on X-Chain"
                  example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/XChainAssetDetails"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions":
        get:
            operationId: "listAssetTransactions"
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listAssetTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.transactions.listAssetTransactions({\n    txTypes: [\n      \"AddValidatorTx\",\n    ],\n    startTimestamp: 1689541049,\n    endTimestamp: 1689800249,\n    pageSize: 10,\n    blockchainId: \"x-chain\",\n    assetId: \"th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List asset transactions"
            description: "Lists asset transactions corresponding to the given asset id on the X-Chain."
            parameters:
                - name: "txTypes"
                  required: false
                  in: "query"
                  example: ["AddValidatorTx"]
                  description: "Query param for filtering items based on transaction types."
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                - name: "startTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  example: 1689541049
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "endTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  example: 1689800249
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "blockchainId"
                  required: true
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  example: "x-chain"
                  schema: {"$ref": "#/components/schemas/XChainId"}
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "assetId"
                  required: true
                  in: "path"
                  description: "Asset ID for any asset on X-Chain"
                  example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network Transactions"
    "/v1/networks/{network}/addresses:listChainIds":
        get:
            operationId: "getChainIdsForAddresses"
            x-speakeasy-group: "glacier.primaryNetwork"
            summary: "Get chain interactions for addresses"
            x-codeSamples: [{"lang": "typescript", "label": "getChainIdsForAddresses", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.getChainIdsForAddresses({\n    addresses: \"avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Returns Primary Network chains that each address has touched in the form of an address mapped array. If an address has had any on-chain interaction for a chain, that chain's chain id will be returned."
            parameters:
                - name: "addresses"
                  required: true
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                  schema:
                    type: "string"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ChainAddressChainIdMapListResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}":
        get:
            operationId: "getNetworkDetails"
            x-speakeasy-group: "glacier.primaryNetwork"
            summary: "Get network details"
            x-codeSamples: [{"lang": "typescript", "label": "getNetworkDetails", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.getNetworkDetails({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets network details such as validator and delegator stats."
            parameters:
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetNetworkDetailsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/blockchains":
        get:
            operationId: "listBlockchains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            x-codeSamples: [{"lang": "typescript", "label": "listBlockchains", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.listBlockchains({\n    pageSize: 10,\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List blockchains"
            description: "Lists all blockchains registered on the network."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListBlockchainsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/subnets":
        get:
            operationId: "listSubnets"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            x-codeSamples: [{"lang": "typescript", "label": "listSubnets", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.listSubnets({\n    pageSize: 10,\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List subnets"
            description: "Lists all subnets registered on the network."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListSubnetsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/subnets/{subnetId}":
        get:
            operationId: "getSubnetById"
            x-speakeasy-group: "glacier.primaryNetwork"
            summary: "Get Subnet details by ID"
            x-codeSamples: [{"lang": "typescript", "label": "getSubnetById", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.getSubnetById({\n    subnetId: \"11111111111111111111111111111111LpoYY\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Get details of the Subnet registered on the network."
            parameters:
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "subnetId"
                  required: true
                  in: "path"
                  description: "Subnet ID to fetch details for"
                  example: "11111111111111111111111111111111LpoYY"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Subnet"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/validators":
        get:
            operationId: "listValidators"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            x-codeSamples: [{"lang": "typescript", "label": "listValidators", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.listValidators({\n    pageSize: 10,\n    nodeIds: \"NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs\",\n    sortOrder: \"asc\",\n    validationStatus: \"completed\",\n    minDelegationCapacity: \"0\",\n    maxDelegationCapacity: \"720000000000000000\",\n    minTimeRemaining: 0,\n    maxTimeRemaining: 2147483647,\n    minFeePercentage: 2,\n    maxFeePercentage: 100,\n    minUptimePerformance: 90,\n    maxUptimePerformance: 100,\n    subnetId: \"11111111111111111111111111111111LpoYY\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List validators"
            description: "Lists details for validators. By default, returns details for all validators. Filterable by validator node ids and minimum delegation capacity."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "nodeIds"
                  required: false
                  in: "query"
                  description: "A comma separated list of node ids to filter by."
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                  schema:
                    type: "string"
                - name: "sortBy"
                  required: false
                  in: "query"
                  description: "Which property to sort by, in conjunction with sortOrder.\n\nNote: Delegation fee is only available for mainnet validators. Set `subnetId` to `11111111111111111111111111111111LpoYY`  to use this option."
                  schema: {"$ref": "#/components/schemas/SortByOption"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                - name: "validationStatus"
                  required: false
                  in: "query"
                  description: "Validation status of the node."
                  example: "completed"
                  schema: {"$ref": "#/components/schemas/ValidationStatusType"}
                - name: "minDelegationCapacity"
                  required: false
                  in: "query"
                  description: "The minimum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000"
                  example: "0"
                  schema:
                    type: "string"
                - name: "maxDelegationCapacity"
                  required: false
                  in: "query"
                  description: "The maximum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000."
                  example: "720000000000000000"
                  schema:
                    type: "string"
                - name: "minTimeRemaining"
                  required: false
                  in: "query"
                  description: "The minimum validation time remaining, in seconds, used to filter the set of nodes being returned."
                  example: 0
                  schema:
                    type: "number"
                    maximum: 2147483647
                    minimum: 0
                - name: "maxTimeRemaining"
                  required: false
                  in: "query"
                  description: "The maximum validation time remaining, in seconds, used to filter the set of nodes being returned."
                  example: 2147483647
                  schema:
                    type: "number"
                    maximum: 2147483647
                    minimum: 0
                - name: "minFeePercentage"
                  required: false
                  in: "query"
                  description: "The minimum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 2.0, as per the Avalanche spec."
                  example: 2
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 2
                - name: "maxFeePercentage"
                  required: false
                  in: "query"
                  description: "The maximum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 100.0."
                  example: 100
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 2
                - name: "minUptimePerformance"
                  required: false
                  in: "query"
                  description: "The minimum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned Default is 90."
                  example: 90
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 0
                - name: "maxUptimePerformance"
                  required: false
                  in: "query"
                  description: "The maximum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned. Default is 100."
                  example: 100
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 0
                - name: "subnetId"
                  required: false
                  in: "query"
                  description: "The subnet ID to filter by. If not provided, then all subnets will be returned."
                  example: "11111111111111111111111111111111LpoYY"
                  schema: {}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListValidatorDetailsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/validators/{nodeId}":
        get:
            operationId: "getSingleValidatorDetails"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            x-codeSamples: [{"lang": "typescript", "label": "getSingleValidatorDetails", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.getSingleValidatorDetails({\n    pageSize: 10,\n    nodeId: \"NodeID-111111111111111111116DBWJs\",\n    validationStatus: \"completed\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "Get single validator details"
            description: "List validator details for a single validator.  Filterable by validation status."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "nodeId"
                  required: true
                  in: "path"
                  description: "A primary network (P or X chain) nodeId."
                  example: "NodeID-111111111111111111116DBWJs"
                  schema:
                    type: "string"
                - name: "validationStatus"
                  required: false
                  in: "query"
                  description: "Validation status of the node."
                  example: "completed"
                  schema: {"$ref": "#/components/schemas/ValidationStatusType"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListValidatorDetailsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/networks/{network}/delegators":
        get:
            operationId: "listDelegators"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            x-codeSamples: [{"lang": "typescript", "label": "listDelegators", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.primaryNetwork.listDelegators({\n    pageSize: 10,\n    rewardAddresses: \"P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc\",\n    sortOrder: \"asc\",\n    delegationStatus: \"completed\",\n    nodeIds: \"NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List delegators"
            description: "Lists details for delegators."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "rewardAddresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of reward addresses to filter by."
                  example: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc"
                  schema:
                    type: "string"
                - name: "network"
                  required: true
                  in: "path"
                  description: "Either mainnet or a testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/Network"}
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                - name: "delegationStatus"
                  required: false
                  in: "query"
                  description: "Delegation status of the node."
                  example: "completed"
                  schema: {"$ref": "#/components/schemas/DelegationStatusType"}
                - name: "nodeIds"
                  required: false
                  in: "query"
                  description: "A comma separated list of node ids to filter by."
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListDelegatorDetailsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Primary Network"
    "/v1/apiUsageMetrics":
        get:
            operationId: "getApiUsageMetrics"
            x-speakeasy-group: "glacier.usageMetrics"
            summary: "Get usage metrics for the Glacier API"
            x-codeSamples: [{"lang": "typescript", "label": "getApiUsageMetrics", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.usageMetrics.getApiUsageMetrics({\n    startTimestamp: 1689541049,\n    endTimestamp: 1689800249,\n    timeInterval: \"hourly\",\n    groupBy: \"requestPath\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets metrics for Glacier API usage over a specified time interval aggregated at the specified time-duration granularity."
            parameters:
                - name: "orgId"
                  required: false
                  in: "query"
                  description: "Organization ID to fetch usage metrics for"
                  schema:
                    type: "string"
                - name: "startTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  example: 1689541049
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "endTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  example: 1689800249
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "timeInterval"
                  required: false
                  in: "query"
                  description: "Time interval granularity for data aggregation"
                  example: "hourly"
                  schema: {"$ref": "#/components/schemas/TimeIntervalGranularityExtended"}
                - name: "groupBy"
                  required: false
                  in: "query"
                  description: "Query param for the criterion used for grouping metrics"
                  example: "requestPath"
                  schema: {"$ref": "#/components/schemas/UsageMetricsGroupByEnum"}
                - name: "requestPath"
                  required: false
                  in: "query"
                  description: "Filter aggregated usage metrics by request path."
                  schema:
                    type: "string"
                - name: "responseStatusCode"
                  required: false
                  in: "query"
                  description: "Filter aggregated usage metrics by response status code."
                  schema:
                    type: "string"
                - name: "chainId"
                  required: false
                  in: "query"
                  description: "Filter aggregated usage metrics by chain ID."
                  schema:
                    type: "string"
                - name: "apiKeyId"
                  required: false
                  in: "query"
                  description: "Filter aggregated usage metrics by API key ID."
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UsageMetricsResponseDTO"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Glacier API Usage Metrics"
    "/v1/apiLogs":
        get:
            operationId: "getApiLogs"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.usageMetrics"
            x-codeSamples: [{"lang": "typescript", "label": "getApiLogs", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.usageMetrics.getApiLogs({\n    startTimestamp: 1689541049,\n    endTimestamp: 1689800249,\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "Get logs for requests made by client"
            description: "Gets logs for requests made by client over a specified time interval for a specific organization."
            parameters:
                - name: "orgId"
                  required: false
                  in: "query"
                  description: "Organization ID to fetch usage metrics for"
                  schema:
                    type: "string"
                - name: "startTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  example: 1689541049
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "endTimestamp"
                  required: false
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  example: 1689800249
                  schema:
                    minimum: 0
                    type: "integer"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return."
                  schema:
                    minimum: 1
                    maximum: 100
                    default: 10
                    type: "integer"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LogsResponseDTO"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Glacier API Usage Metrics"
    "/v1/media/uploadImage":
        post:
            operationId: "MediaController_uploadImage"
            x-speakeasy-ignore: true
            responses:
                "201": {}
    "/v1/webhooks":
        post:
            operationId: "createWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Create a webhook"
            x-codeSamples: [{"lang": "typescript", "label": "createWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.createWebhook({\n    url: \"https://unrealistic-well-being.name\",\n    chainId: \"<value>\",\n    eventType: \"address_activity\",\n    metadata: {\n      addresses: [\n        \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n      ],\n      eventSignatures: [\n        \"0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Create a new webhook."
            requestBody:
                required: true
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CreateWebhookRequest"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
        get:
            operationId: "listWebhooks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.webhooks"
            x-codeSamples: [{"lang": "typescript", "label": "listWebhooks", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.listWebhooks({\n    pageSize: 10,\n    status: \"active\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List webhooks"
            description: "Lists webhooks for the user."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "status"
                  required: false
                  in: "query"
                  example: "active"
                  description: "Status of the webhook. Use \"active\" to return only active webhooks, \"inactive\" to return only inactive webhooks. Else if no status is provided, all configured webhooks will be returned."
                  schema: {"$ref": "#/components/schemas/WebhookStatus"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListWebhooksResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
    "/v1/webhooks/{id}":
        get:
            operationId: "getWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Get a webhook by ID"
            x-codeSamples: [{"lang": "typescript", "label": "getWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.getWebhook({\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Retrieves a webhook by ID."
            parameters:
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
        delete:
            operationId: "deactivateWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Deactivate a webhook"
            x-codeSamples: [{"lang": "typescript", "label": "deactivateWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.deactivateWebhook({\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Deactivates a webhook by ID."
            parameters:
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
        patch:
            operationId: "updateWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Update a webhook"
            x-codeSamples: [{"lang": "typescript", "label": "updateWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.updateWebhook({\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n    updateWebhookRequest: {},\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Updates an existing webhook."
            parameters:
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/UpdateWebhookRequest"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
    "/v1/webhooks:generateOrRotateSharedSecret":
        post:
            operationId: "generateSharedSecret"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Generate a shared secret"
            x-codeSamples: [{"lang": "typescript", "label": "generateSharedSecret", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.generateSharedSecret();\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Generates a new shared secret."
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SharedSecretsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
    "/v1/webhooks:getSharedSecret":
        get:
            operationId: "getSharedSecret"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Get a shared secret"
            x-codeSamples: [{"lang": "typescript", "label": "getSharedSecret", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.getSharedSecret();\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Get a previously generated shared secret."
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SharedSecretsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
    "/v1/webhooks/{id}/addresses":
        patch:
            operationId: "addAddressesToWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Add addresses to webhook"
            x-codeSamples: [{"lang": "typescript", "label": "addAddressesToWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.addAddressesToWebhook({\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n    addressesChangeRequest: {\n      addresses: [\n        \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Add addresses to webhook."
            parameters:
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/AddressesChangeRequest"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
        delete:
            operationId: "removeAddressesFromWebhook"
            x-speakeasy-group: "glacier.webhooks"
            summary: "Remove addresses from webhook"
            x-codeSamples: [{"lang": "typescript", "label": "removeAddressesFromWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.removeAddressesFromWebhook({\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n    addressesChangeRequest: {\n      addresses: [\n        \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Remove addresses from webhook."
            parameters:
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/AddressesChangeRequest"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
        get:
            operationId: "getAddressesFromWebhook"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.webhooks"
            x-codeSamples: [{"lang": "typescript", "label": "getAddressesFromWebhook", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.webhooks.getAddressesFromWebhook({\n    pageSize: 10,\n    id: \"f33de69c-d13b-4691-908f-870d6e2e6b04\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List adresses by webhook"
            description: "List adresses by webhook."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "id"
                  required: true
                  in: "path"
                  description: "The webhook identifier."
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListWebhookAddressesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Webhooks"
    "/v1/teleporter/messages/{messageId}":
        get:
            operationId: "getTeleporterMessage"
            x-speakeasy-group: "glacier.teleporter"
            summary: "Get a teleporter message"
            x-codeSamples: [{"lang": "typescript", "label": "getTeleporterMessage", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.teleporter.getTeleporterMessage({\n    messageId: \"acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets a teleporter message by message ID."
            parameters:
                - name: "messageId"
                  required: true
                  in: "path"
                  description: "The message ID of the teleporter message."
                  example: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/PendingTeleporterMessage"}
                                    - {"$ref": "#/components/schemas/DeliveredTeleporterMessage"}
                                    - {"$ref": "#/components/schemas/DeliveredSourceNotIndexedTeleporterMessage"}
                                discriminator:
                                    propertyName: "status"
                                    mapping:
                                        "pending": "#/components/schemas/PendingTeleporterMessage"
                                        "delivered": "#/components/schemas/DeliveredTeleporterMessage"
                                        "delivered_source_not_indexed": "#/components/schemas/DeliveredSourceNotIndexedTeleporterMessage"
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Teleporter"
    "/v1/teleporter/messages":
        get:
            operationId: "listTeleporterMessages"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.teleporter"
            x-codeSamples: [{"lang": "typescript", "label": "listTeleporterMessages", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.teleporter.listTeleporterMessages({\n    pageSize: 10,\n    sourceBlockchainId: \"2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY\",\n    destinationBlockchainId: \"yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp\",\n    to: \"0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC\",\n    from: \"0x321eDA69247566D662178feE695C7026c604Cd94\",\n    network: \"mainnet\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List teleporter messages"
            description: "Lists teleporter messages. Ordered by timestamp in descending order."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "sourceBlockchainId"
                  required: false
                  in: "query"
                  description: "The base58 encoded blockchain ID or evm chain ID of the source chain that the teleporter message was sent from."
                  example: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
                  schema:
                    type: "string"
                - name: "destinationBlockchainId"
                  required: false
                  in: "query"
                  description: "The base58 encoded blockchain ID or evm chain ID of the destination chain that the teleporter message was sent to."
                  example: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                  schema:
                    type: "string"
                - name: "blockchainId"
                  required: false
                  in: "query"
                  description: "The base58 encoded blockchain ID of either source or destination chain that one teleporter message interacts with."
                  schema:
                    type: "string"
                - name: "to"
                  required: false
                  in: "query"
                  description: "The address of the recipient of the teleporter message."
                  example: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
                  schema:
                    type: "string"
                - name: "from"
                  required: false
                  in: "query"
                  description: "The address of the sender of the teleporter message."
                  example: "0x321eDA69247566D662178feE695C7026c604Cd94"
                  schema:
                    type: "string"
                - name: "network"
                  required: false
                  in: "query"
                  description: "mainnet or testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/NetworkType"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTeleporterMessagesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "Teleporter"
    "/v1/chains/{chainId}/addresses/{address}/balances:getNative":
        get:
            operationId: "getNativeBalance"
            x-speakeasy-group: "glacier.evm.balances"
            summary: "Get native token balance"
            x-codeSamples: [{"lang": "typescript", "label": "getNativeBalance", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.balances.getNativeBalance({\n    blockNumber: \"6479329\",\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    currency: \"usd\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets native token balance of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter."
            parameters:
                - name: "blockNumber"
                  required: false
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  example: "6479329"
                  schema:
                    type: "string"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "currency"
                  required: false
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  example: "usd"
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetNativeBalanceResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Balances"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc20":
        get:
            operationId: "listErc20Balances"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            x-codeSamples: [{"lang": "typescript", "label": "listErc20Balances", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.balances.listErc20Balances({\n    blockNumber: \"6479329\",\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    contractAddresses: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB\",\n    currency: \"usd\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-20 balances"
            description: "Lists ERC-20 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for specific contracts can be retrieved with the `contractAddresses` parameter."
            parameters:
                - name: "blockNumber"
                  required: false
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  example: "6479329"
                  schema:
                    type: "string"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "filterSpamTokens"
                  required: false
                  in: "query"
                  description: "whether to filter out spam tokens from the response. Default is true."
                  schema:
                    default: true
                    type: "boolean"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "contractAddresses"
                  required: false
                  in: "query"
                  description: "A comma separated list of contract addresses to filter by."
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
                  schema:
                    type: "string"
                - name: "currency"
                  required: false
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  example: "usd"
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc20BalancesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Balances"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc721":
        get:
            operationId: "listErc721Balances"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            x-codeSamples: [{"lang": "typescript", "label": "listErc721Balances", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.balances.listErc721Balances({\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    contractAddress: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-721 balances"
            description: "Lists ERC-721 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "contractAddress"
                  required: false
                  in: "query"
                  description: "A contract addresses to filter by."
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc721BalancesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Balances"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc1155":
        get:
            operationId: "listErc1155Balances"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            x-codeSamples: [{"lang": "typescript", "label": "listErc1155Balances", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.balances.listErc1155Balances({\n    blockNumber: \"6479329\",\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    contractAddress: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-1155 balances"
            description: "Lists ERC-1155 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            parameters:
                - name: "blockNumber"
                  required: false
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  example: "6479329"
                  schema:
                    type: "string"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "contractAddress"
                  required: false
                  in: "query"
                  description: "A contract addresses to filter by."
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc1155BalancesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Balances"
    "/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles":
        get:
            operationId: "listCollectibleBalances"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            x-codeSamples: [{"lang": "typescript", "label": "listCollectibleBalances", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.balances.listCollectibleBalances({\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    contractAddress: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List collectible (ERC-721/ERC-1155) balances"
            description: "Lists ERC-721 and ERC-1155 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "contractAddress"
                  required: false
                  in: "query"
                  description: "A contract addresses to filter by."
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListCollectibleBalancesResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Balances"
    "/v1/chains/{chainId}/blocks":
        get:
            operationId: "getLatestBlocks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.blocks"
            x-codeSamples: [{"lang": "typescript", "label": "getLatestBlocks", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.blocks.getLatestBlocks({\n    pageSize: 10,\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List latest blocks"
            description: "Lists the latest indexed blocks on the EVM-compatible chain sorted in descending order by block timestamp."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListEvmBlocksResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Blocks"
    "/v1/chains/{chainId}/blocks/{blockId}":
        get:
            operationId: "getBlock"
            x-speakeasy-group: "glacier.evm.blocks"
            summary: "Get block"
            x-codeSamples: [{"lang": "typescript", "label": "getBlock", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.blocks.getBlock({\n    blockId: \"0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets the details of an individual block on the EVM-compatible chain."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "blockId"
                  required: true
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetEvmBlockResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Blocks"
    "/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment":
        get:
            operationId: "getDeploymentTransaction"
            x-speakeasy-group: "glacier.evm.transactions"
            summary: "Get deployment transaction"
            x-codeSamples: [{"lang": "typescript", "label": "getDeploymentTransaction", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.getDeploymentTransaction({\n    address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    currency: \"usd\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "If the address is a smart contract, returns the transaction in which it was deployed."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
                - name: "currency"
                  required: false
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  example: "usd"
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetTransactionResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/contracts/{address}/deployments":
        get:
            operationId: "listContractDeployments"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listContractDeployments", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listContractDeployments({\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List deployed contracts"
            description: "Lists all contracts deployed by the given address."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListContractsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}":
        get:
            operationId: "getContractMetadata"
            x-speakeasy-group: "glacier.evm.contracts"
            summary: "Get contract metadata"
            x-codeSamples: [{"lang": "typescript", "label": "getContractMetadata", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.contracts.getContractMetadata({\n    address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets metadata about the contract at the given address."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/Erc721Contract"}
                                    - {"$ref": "#/components/schemas/Erc1155Contract"}
                                    - {"$ref": "#/components/schemas/Erc20Contract"}
                                    - {"$ref": "#/components/schemas/UnknownContract"}
                                discriminator:
                                    propertyName: "ercType"
                                    mapping:
                                        "ERC-721": "#/components/schemas/Erc721Contract"
                                        "ERC-1155": "#/components/schemas/Erc1155Contract"
                                        "ERC-20": "#/components/schemas/Erc20Contract"
                                        "UNKNOWN": "#/components/schemas/UnknownContract"
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Contracts"
    "/v1/chains/{chainId}/contracts/{address}":
        patch:
            operationId: "updateContractInfo"
            x-speakeasy-ignore: true
            summary: "Update contract information"
            description: "Update contract information. Updates will be reviewed by the Ava Labs team before they are published."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "Contract address on the relevant chain."
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ContractSubmissionBody"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UpdateContractResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Contracts"
    "/v1/chains":
        get:
            operationId: "supportedChains"
            x-speakeasy-group: "glacier.evm.chains"
            summary: "List chains"
            x-codeSamples: [{"lang": "typescript", "label": "supportedChains", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.chains.supportedChains({\n    network: \"mainnet\",\n    feature: \"nftIndexing\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Lists the supported EVM-compatible chains. Filterable by network."
            parameters:
                - name: "network"
                  required: false
                  in: "query"
                  description: "mainnet or testnet."
                  example: "mainnet"
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                - name: "feature"
                  required: false
                  in: "query"
                  description: "Filter by feature."
                  example: "nftIndexing"
                  schema: {"$ref": "#/components/schemas/GlacierApiFeature"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListChainsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Chains"
    "/v1/chains/{chainId}":
        get:
            operationId: "getChainInfo"
            x-speakeasy-group: "glacier.evm.chains"
            summary: "Get chain information"
            x-codeSamples: [{"lang": "typescript", "label": "getChainInfo", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.chains.getChainInfo({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets chain information for the EVM-compatible chain if supported by the api."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetChainResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Chains"
    "/v1/chains/{chainId}/tokens/{address}/transfers":
        get:
            operationId: "listTransfers"
            x-speakeasy-group: "glacier.evm.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-codeSamples: [{"lang": "typescript", "label": "listTransfers", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listTransfers({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC transfers"
            description: "Lists ERC transfers for an ERC-20, ERC-721, or ERC-1155 contract address."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTransfersResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions":
        get:
            operationId: "listTransactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listTransactions({\n    pageSize: 10,\n    startBlock: 6479329,\n    endBlock: 6479330,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n    sortOrder: \"asc\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List transactions"
            description: "Returns a list of transactions where the given wallet address had an on-chain interaction for the given chain. The ERC-20 transfers, ERC-721 transfers, ERC-1155, and internal transactions returned are only those where the input address had an interaction. Specifically, those lists only inlcude entries where the input address was the sender (`from` field) or the receiver (`to` field) for the sub-transaction. Therefore the transactions returned from this list may not be complete representations of the on-chain data. For a complete view of a transaction use the `/chains/:chainId/transactions/:txHash` endpoint.\n\nFilterable by block ranges."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
                - name: "sortOrder"
                  required: false
                  in: "query"
                  example: "asc"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  schema: {"$ref": "#/components/schemas/SortOrder"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTransactionDetailsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listNative":
        get:
            operationId: "listNativeTransactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listNativeTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listNativeTransactions({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List native transactions"
            description: "Lists native transactions for an address. Filterable by block range."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc20":
        get:
            operationId: "listErc20Transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listErc20Transactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listErc20Transactions({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-20 transfers"
            description: "Lists ERC-20 transfers for an address. Filterable by block range."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc20TransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc721":
        get:
            operationId: "listErc721Transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listErc721Transactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listErc721Transactions({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-721 transfers"
            description: "Lists ERC-721 transfers for an address. Filterable by block range."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc721TransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155":
        get:
            operationId: "listErc1155Transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listErc1155Transactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listErc1155Transactions({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List ERC-1155 transfers"
            description: "Lists ERC-1155 transfers for an address. Filterable by block range."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc1155TransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listInternals":
        get:
            operationId: "listInternalTransactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listInternalTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listInternalTransactions({\n    startBlock: 6479329,\n    endBlock: 6479330,\n    pageSize: 10,\n    address: \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List internal transactions"
            description: "Returns a list of internal transactions for an address and chain. Filterable by block range.\n\nNote that the internal transactions list only contains `CALL` or `CALLCODE` transactions with a non-zero value and `CREATE`/`CREATE2` transactions. To get a complete list of internal transactions use the `debug_` prefixed RPC methods on an archive node."
            parameters:
                - name: "startBlock"
                  required: false
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  example: "6479329"
                  schema:
                    type: "number"
                - name: "endBlock"
                  required: false
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  example: "6479330"
                  schema:
                    type: "number"
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "address"
                  required: true
                  in: "path"
                  description: "A wallet address."
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListInternalTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/transactions/{txHash}":
        get:
            operationId: "getTransaction"
            x-speakeasy-group: "glacier.evm.transactions"
            summary: "Get transaction"
            x-codeSamples: [{"lang": "typescript", "label": "getTransaction", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.getTransaction({\n    txHash: \"0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Gets the details of a single transaction."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "txHash"
                  required: true
                  in: "path"
                  description: "A transaction hash."
                  example: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetTransactionResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/blocks/{blockId}/transactions":
        get:
            operationId: "getTransactionsForBlock"
            x-speakeasy-group: "glacier.evm.transactions"
            summary: "List transactions for a block"
            x-codeSamples: [{"lang": "typescript", "label": "getTransactionsForBlock", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.getTransactionsForBlock({\n    blockId: \"0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]
            description: "Lists the transactions that occured in a given block."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "blockId"
                  required: true
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                  schema:
                    type: "string"
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/chains/{chainId}/transactions":
        get:
            operationId: "listLatestTransactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            x-codeSamples: [{"lang": "typescript", "label": "listLatestTransactions", "source": "import { AvalancheSDK } from \"@avalabs/avalanche-sdk\";\n\nconst avalancheSDK = new AvalancheSDK({\n  glacierApiKey: \"<YOUR_API_KEY_HERE>\",\n  chainId: \"43114\",\n  network: \"mainnet\",\n});\n\nasync function run() {\n  const result = await avalancheSDK.glacier.evm.transactions.listLatestTransactions({\n    pageSize: 10,\n  });\n\n  for await (const page of result) {\n    // handle page\n  }\n}\n\nrun();"}]
            summary: "List latest transactions"
            description: "Lists the latest transactions. Filterable by status."
            parameters:
                - name: "pageToken"
                  required: false
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  schema:
                    type: "string"
                - name: "pageSize"
                  required: false
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  schema:
                    type: "integer"
                    default: 10
                    minimum: 1
                    maximum: 100
                  example: "10"
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
                - name: "status"
                  required: false
                  in: "query"
                  description: "A status filter for listed transactions."
                  schema: {"$ref": "#/components/schemas/TransactionStatus"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
            tags:
                - "EVM Transactions"
    "/v1/ext/bc/{chainId}/rpc":
        post:
            operationId: "rpc"
            x-speakeasy-ignore: true
            summary: "Calls JSON-RPC method"
            description: "Calls JSON-RPC method."
            parameters:
                - name: "chainId"
                  required: true
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  example: "43114"
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            oneOf:
                                - {"$ref": "#/components/schemas/RpcRequestBodyDto"}
                                - type: "array"
                                  items: {"$ref": "#/components/schemas/RpcRequestBodyDto"}
            responses:
                "200":
                    description: "Successful response"
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/RpcSuccessResponseDto"}
                                    - {"$ref": "#/components/schemas/RpcErrorResponseDto"}
                                    - type: "array"
                                      items:
                                        oneOf:
                                            - {"$ref": "#/components/schemas/RpcSuccessResponseDto"}
                                            - {"$ref": "#/components/schemas/RpcErrorResponseDto"}
                "400":
                    description: "Bad requests generally mean the client has passed invalid \n    or malformed parameters. Error messages in the response could help in \n    evaluating the error."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadRequest"}
                "401":
                    description: "When a client attempts to access resources that require \n    authorization credentials but the client lacks proper authentication \n    in the request, the server responds with 401."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Unauthorized"}
                "403":
                    description: "When a client attempts to access resources with valid\n    credentials but doesn't have the privilege to perform that action, \n    the server responds with 403."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Forbidden"}
                "404":
                    description: "The error is mostly returned when the client requests\n    with either mistyped URL, or the passed resource is moved or deleted, \n    or the resource doesn't exist."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NotFound"}
                "429":
                    description: "This error is returned when the client has sent too many,\n    and has hit the rate limit."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TooManyRequests"}
                "500":
                    description: "The error is a generic server side error that is \n    returned for any uncaught and unexpected issues on the server side. \n    This should be very rare, and you may reach out to us if the problem \n    persists for a longer duration."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/InternalServerError"}
                "502":
                    description: "This is an internal error indicating invalid response \n      received by the client-facing proxy or gateway from the upstream server."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BadGateway"}
                "503":
                    description: "The error is returned for certain routes on a particular\n    Subnet. This indicates an internal problem with our Subnet node, and may \n    not necessarily mean the Subnet is down or affected."
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ServiceUnavailable"}
                "504":
                    description: "Request timed out"
            tags:
                - "RPC"
info:
    title: "Glacier API"
    description: "The Glacier API provides web3 application developers with multi-chain data related to Avalanche's primary network, Avalanche subnets, and Ethereum. With Glacier, you can easily build products that leverage real-time and historical transaction and transfer history, native and token balances, and various types of token metadata. The API is in Beta and may be subject to change.</br></br>If you have feedback or feature requests for the API, please submit them <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security issues can be reported <a href=\"https://immunefi.com/bounty/avalabs\">here</a>."
    version: "Beta"
    contact: {}
tags:
    - name: "EVM Chains"
      description: "Find information about indexed EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Blocks"
      description: "Find information about blocks on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Transactions"
      description: "Find information about transactions on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Balances"
      description: "Find information about balances on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Contracts"
      description: "Find information about contracts on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "Primary Network"
    - name: "Primary Network Blocks"
      description: "Find information about blocks on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Vertices"
      description: "Find information about vertices on Avalanche's X-Chain."
    - name: "Primary Network Transactions"
      description: "Find information about transactions on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Balances"
      description: "Find information about balances on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network UTXOs"
      description: "Find information about utxos on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Rewards"
      description: "Find information about rewards on Avalanche's Primary Network."
    - name: "NFTs"
    - name: "Operations"
    - name: "Health Check"
    - name: "Teleporter"
      description: "Find information about Teleporter transactions."
    - name: "Webhooks"
      description: "Manage webhooks and get notified for various onchain activities."
    - name: "RPC"
      description: "Interact with chain nodes using JSON-RPC."
    - name: "Glacier API Usage Metrics"
      description: "Usage metrics and logs for the Glacier API."
servers:
    - url: "https://glacier-api.avax.network"
components:
    securitySchemes:
        "GlacierApiKey":
            type: "apiKey"
            in: "header"
            name: "x-glacier-api-key"
            description: "Api keys provide higher access to rate limits. To obtain an api key, sign up for an account at https://avacloud.io/."
    schemas:
        "NftTokenMetadataStatus":
            type: "string"
            description: "The metadata indexing status of the nft."
            enum:
                - "UNKNOWN"
                - "MISSING_TOKEN"
                - "INVALID_TOKEN_URI"
                - "INVALID_TOKEN_URI_SCHEME"
                - "UNREACHABLE_TOKEN_URI"
                - "THROTTLED_TOKEN_URI"
                - "METADATA_CONTENT_TOO_LARGE"
                - "INVALID_METADATA"
                - "INVALID_METADATA_JSON"
                - "INDEXED"
                - "UNINDEXED"
        "Erc721TokenMetadata":
            type: "object"
            properties:
                "indexStatus": {"example": "indexed", "$ref": "#/components/schemas/NftTokenMetadataStatus"}
                "metadataLastUpdatedTimestamp":
                    type: "number"
                "name":
                    type: "string"
                "symbol":
                    type: "string"
                "imageUri":
                    type: "string"
                "description":
                    type: "string"
                "animationUri":
                    type: "string"
                "externalUrl":
                    type: "string"
                "background":
                    type: "string"
                "attributes":
                    type: "string"
            required:
                - "indexStatus"
        "Erc721Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc721TokenMetadata"}
                "ownerAddress":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            required:
                - "address"
                - "name"
                - "symbol"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
        "Erc1155TokenMetadata":
            type: "object"
            properties:
                "indexStatus": {"example": "indexed", "$ref": "#/components/schemas/NftTokenMetadataStatus"}
                "metadataLastUpdatedTimestamp":
                    type: "number"
                "name":
                    type: "string"
                "symbol":
                    type: "string"
                "imageUri":
                    type: "string"
                "description":
                    type: "string"
                "animationUri":
                    type: "string"
                "externalUrl":
                    type: "string"
                "background":
                    type: "string"
                "decimals":
                    type: "number"
                "properties":
                    type: "string"
            required:
                - "indexStatus"
        "Erc1155Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc1155TokenMetadata"}
            required:
                - "address"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
        "BadRequest":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 400
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Bad Request"
            required:
                - "message"
                - "statusCode"
                - "error"
        "Unauthorized":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 401
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Unauthorized"
            required:
                - "message"
                - "statusCode"
                - "error"
        "Forbidden":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 403
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Forbidden"
            required:
                - "message"
                - "statusCode"
                - "error"
        "NotFound":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 404
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Not Found"
            required:
                - "message"
                - "statusCode"
                - "error"
        "TooManyRequests":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 429
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Too Many Requests"
            required:
                - "message"
                - "statusCode"
                - "error"
        "InternalServerError":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 500
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Internal Server Error"
            required:
                - "message"
                - "statusCode"
                - "error"
        "BadGateway":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 502
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Bad Gateway"
            required:
                - "message"
                - "statusCode"
                - "error"
        "ServiceUnavailable":
            type: "object"
            properties:
                "message":
                    description: "The error message describing the reason for the exception"
                    oneOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                "statusCode":
                    type: "number"
                    description: "The HTTP status code of the response"
                    example: 503
                "error":
                    type: "string"
                    description: "The type of error"
                    example: "Service Unavailable"
            required:
                - "message"
                - "statusCode"
                - "error"
        "ListNftTokens":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "tokens":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721Token"}
                            - {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "tokens"
        "OperationStatusCode":
            type: "string"
            enum:
                - "ErrInvalidRequest"
                - "ErrInternal"
                - "WarnTruncatedExport"
        "TransactionExportMetadata":
            type: "object"
            properties:
                "code": {"$ref": "#/components/schemas/OperationStatusCode"}
                "downloadUrl":
                    type: "string"
                    description: "File download URL. Provided only for COMPLETED and COMPLETED_WITH_WARNING operations."
                "nextDate":
                    type: "string"
                    description: "The next date (YYYY-MM-DD) to use as the firstDate in follow up requests if a request results in a transaction history exceeding the max size and has been reported as `COMPLETED_WITH_WARNING` with the warning 'WarnTruncatedExport'."
        "OperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE"
                - "TRANSACTION_EXPORT_EVM"
        "OperationStatus":
            type: "string"
            enum:
                - "RUNNING"
                - "COMPLETED"
                - "COMPLETED_WITH_WARNING"
                - "FAILED"
        "OperationStatusResponse":
            type: "object"
            properties:
                "operationId":
                    type: "string"
                "operationType": {"$ref": "#/components/schemas/OperationType"}
                "operationStatus": {"$ref": "#/components/schemas/OperationStatus"}
                "message":
                    type: "string"
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/TransactionExportMetadata"}
                "createdAtTimestamp":
                    type: "number"
                "updatedAtTimestamp":
                    type: "number"
            required:
                - "operationId"
                - "operationType"
                - "operationStatus"
                - "metadata"
                - "createdAtTimestamp"
                - "updatedAtTimestamp"
        "EVMOperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_EVM"
        "EvmNetworkOptions":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "includeChains":
                    example: ["43114"]
                    type: "array"
                    items:
                        type: "string"
            required:
                - "addresses"
                - "includeChains"
        "CreateEvmTransactionExportRequest":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/EVMOperationType"}
                "firstDate":
                    type: "string"
                    example: "2023-05-01"
                "lastDate":
                    type: "string"
                    example: "2023-05-02"
                "startDate":
                    type: "string"
                    example: "2023-05-01"
                    deprecated: true
                "endDate":
                    type: "string"
                    example: "2023-05-02"
                    deprecated: true
                "options": {"$ref": "#/components/schemas/EvmNetworkOptions"}
            required:
                - "type"
                - "firstDate"
                - "lastDate"
                - "startDate"
                - "endDate"
                - "options"
        "PrimaryNetworkOperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE"
        "PrimaryNetworkOptions":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "cChainEvmAddresses":
                    type: "array"
                    items:
                        type: "string"
                "includeChains":
                    type: "array"
                    example: ["p-chain"]
                    items:
                        type: "string"
                        enum:
                            - "11111111111111111111111111111111LpoYY"
                            - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                            - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                            - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                            - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                            - "p-chain"
                            - "x-chain"
                            - "c-chain"
            required:
                - "includeChains"
        "CreatePrimaryNetworkTransactionExportRequest":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/PrimaryNetworkOperationType"}
                "firstDate":
                    type: "string"
                    example: "2023-05-01"
                "lastDate":
                    type: "string"
                    example: "2023-05-02"
                "startDate":
                    type: "string"
                    example: "2023-05-01"
                    deprecated: true
                "endDate":
                    type: "string"
                    example: "2023-05-02"
                    deprecated: true
                "options": {"$ref": "#/components/schemas/PrimaryNetworkOptions"}
            required:
                - "type"
                - "firstDate"
                - "lastDate"
                - "startDate"
                - "endDate"
                - "options"
        "PChainTransactionType":
            type: "string"
            enum:
                - "AddValidatorTx"
                - "AddSubnetValidatorTx"
                - "AddDelegatorTx"
                - "CreateChainTx"
                - "CreateSubnetTx"
                - "ImportTx"
                - "ExportTx"
                - "AdvanceTimeTx"
                - "RewardValidatorTx"
                - "RemoveSubnetValidatorTx"
                - "TransformSubnetTx"
                - "AddPermissionlessValidatorTx"
                - "AddPermissionlessDelegatorTx"
                - "BaseTx"
                - "TransferSubnetOwnershipTx"
                - "UNKNOWN"
        "PrimaryNetworkAssetType":
            type: "string"
            description: "Type of asset like SECP256K1 or NFT."
            enum:
                - "secp256k1"
                - "nft"
        "AssetAmount":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
        "RewardType":
            type: "string"
            enum:
                - "VALIDATOR"
                - "DELEGATOR"
                - "VALIDATOR_FEE"
        "UtxoType":
            type: "string"
            enum:
                - "STAKE"
                - "TRANSFER"
        "PChainUtxo":
            type: "object"
            properties:
                "addresses":
                    description: "Addresses that are eligible to sign the consumption of this output."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
                    type: "array"
                    items:
                        type: "string"
                "asset": {"$ref": "#/components/schemas/AssetAmount"}
                "consumedOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is consumed on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "consumingTxHash":
                    type: "string"
                    description: "Transaction ID that consumed this output."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "createdOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is created on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "utxoId":
                    type: "string"
                    description: "UTXO ID for this output."
                    example: "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
                "amount":
                    type: "string"
                    deprecated: true
                "assetId":
                    type: "string"
                    deprecated: true
                "blockNumber":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "consumingBlockNumber":
                    type: "string"
                "consumingBlockTimestamp":
                    type: "number"
                "platformLocktime":
                    type: "number"
                "outputIndex":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "stakeableLocktime":
                    type: "number"
                "staked":
                    type: "boolean"
                "threshold":
                    type: "number"
                "txHash":
                    type: "string"
                "utxoEndTimestamp":
                    type: "number"
                "utxoStartTimestamp":
                    type: "number"
                "utxoType": {"$ref": "#/components/schemas/UtxoType"}
            required:
                - "addresses"
                - "asset"
                - "consumedOnChainId"
                - "createdOnChainId"
                - "utxoId"
                - "amount"
                - "assetId"
                - "blockNumber"
                - "blockTimestamp"
                - "outputIndex"
                - "txHash"
                - "utxoType"
        "SubnetOwnershipInfo":
            type: "object"
            properties:
                "locktime":
                    type: "number"
                    description: "Locktime in seconds after which Subnet owners can control this Subnet."
                    example: 0
                "threshold":
                    type: "number"
                    description: "Minimum number of signatures required to sign the Subnet update transactions."
                    example: 1
                "addresses":
                    description: "Addresses that are eligible to sign the Subnet update transactions."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
                    type: "array"
                    items:
                        type: "string"
            required:
                - "locktime"
                - "threshold"
                - "addresses"
        "BlsCredentials":
            type: "object"
            properties:
                "publicKey":
                    type: "string"
                "proofOfPossession":
                    type: "string"
            required:
                - "publicKey"
                - "proofOfPossession"
        "PChainTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "A P-Chain transaction hash."
                    example: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
                "txType": {"example": "AddDelegatorTx", "$ref": "#/components/schemas/PChainTransactionType"}
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "value":
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountBurned":
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountStaked":
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "startTimestamp":
                    type: "number"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "endTimestamp":
                    type: "number"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "delegationFeePercent":
                    type: "string"
                    description: "Present for AddValidatorTx, AddPermissionlessValidatorTx"
                "nodeId":
                    type: "string"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "subnetId":
                    type: "string"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx, CreateChainTx, CreateSubnetTx"
                "estimatedReward":
                    type: "string"
                    description: "Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "rewardTxHash":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "memo":
                    type: "string"
                "stakingTxHash":
                    type: "string"
                    description: "Present for RewardValidatorTx"
                "subnetOwnershipInfo":
                    description: "Subnet owner details for the CreateSubnetTx or TransferSubnetOwnershipTx"
                    allOf:
                        - {"$ref": "#/components/schemas/SubnetOwnershipInfo"}
                "blsCredentials":
                    description: "Present for AddPermissionlessValidatorTx"
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
            required:
                - "txHash"
                - "txType"
                - "blockTimestamp"
                - "blockNumber"
                - "blockHash"
                - "consumedUtxos"
                - "emittedUtxos"
                - "value"
                - "amountBurned"
                - "amountStaked"
        "XChainTransactionType":
            type: "string"
            description: "Type of transaction."
            enum:
                - "BaseTx"
                - "CreateAssetTx"
                - "OperationTx"
                - "ImportTx"
                - "ExportTx"
                - "UNKNOWN"
        "UtxoCredential":
            type: "object"
            properties:
                "signature":
                    type: "string"
                    description: "Signature provided to consume the output."
                    example: "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA"
                "publicKey":
                    type: "string"
                    description: "Public key associated with the signature."
                    example: "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"
        "Utxo":
            type: "object"
            properties:
                "addresses":
                    description: "Addresses that are eligible to sign the consumption of this output."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
                    type: "array"
                    items:
                        type: "string"
                "asset": {"$ref": "#/components/schemas/AssetAmount"}
                "consumedOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is consumed on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "consumingTxHash":
                    type: "string"
                    description: "Transaction ID that consumed this output."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "createdOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is created on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "utxoId":
                    type: "string"
                    description: "UTXO ID for this output."
                    example: "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
                "consumingTxTimestamp":
                    type: "number"
                    description: "Unix timestamp in seconds at which this output was consumed."
                    example: 1599696000
                "creationTxHash":
                    type: "string"
                    description: "Transaction ID that created this output."
                    example: "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"
                "credentials":
                    description: "Credentials that signed the transaction to consume this utxo"
                    type: "array"
                    items: {"$ref": "#/components/schemas/UtxoCredential"}
                "groupId":
                    type: "number"
                    description: "Index representing the minting set for the NFT mint output."
                "locktime":
                    type: "number"
                    description: "Locktime in seconds after which this output can be consumed."
                    example: 0
                "outputIndex":
                    type: "string"
                    description: "Postion of this output in a list of lexiographically sorted outputs of a transaction."
                    example: "38"
                "payload":
                    type: "string"
                    description: "Hex encoded data for NFT assets."
                "threshold":
                    type: "number"
                    description: "Minimum number of signatures required to consume this output."
                    example: 1
                "timestamp":
                    type: "number"
                    description: "Unix timestamp in seconds at which this outptut was created."
                    example: 1599696000
                "utxoType":
                    type: "string"
                    description: "Type of output."
                    example: "mint"
            required:
                - "addresses"
                - "asset"
                - "consumedOnChainId"
                - "createdOnChainId"
                - "utxoId"
                - "creationTxHash"
                - "locktime"
                - "outputIndex"
                - "threshold"
                - "timestamp"
                - "utxoType"
        "PrimaryNetworkAssetCap":
            type: "string"
            description: "Cap represents if an asset is a variable or fixed cap asset."
            enum:
                - "fixed"
                - "variable"
        "XChainAssetDetails":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "createdAtTimestamp":
                    type: "number"
                    description: "Timestamp in seconds this asset was created on."
                    example: 1675444720
                "cap": {"example": "fixed", "$ref": "#/components/schemas/PrimaryNetworkAssetCap"}
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "createdAtTimestamp"
                - "cap"
        "TransactionVertexDetail":
            type: "object"
            properties:
                "hash":
                    type: "string"
                    description: "Vertex ID of the vertex this transaction belongs to."
                    example: "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
                "height":
                    type: "number"
                    description: "Vertex height of the vertex this transaction belongs to."
                    example: 1961
                "timestamp":
                    type: "number"
                    description: "Timestamp in seconds this vertex was accepted."
                    example: 1600762738
            required:
                - "hash"
                - "height"
                - "timestamp"
        "XChainNonLinearTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "chainFormat":
                    type: "string"
                    description: "Represents chain format this transaction is included in."
                    enum:
                        - "non-linear"
                        - "linear"
                    example: "non-linear"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices."
                    example: 1600762738
                "txType": {"example": "BaseTx", "$ref": "#/components/schemas/XChainTransactionType"}
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "amountUnlocked":
                    description: "Assets unlocked by inputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountCreated":
                    description: "Assets created by outputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "assetCreated":
                    description: "AssetAmount details of the asset created in CreateAssetTx"
                    allOf:
                        - {"$ref": "#/components/schemas/XChainAssetDetails"}
                "vertices":
                    description: "A transaction on X-Chain can be accepted over multiple vertices."
                    type: "array"
                    items: {"$ref": "#/components/schemas/TransactionVertexDetail"}
            required:
                - "txHash"
                - "chainFormat"
                - "timestamp"
                - "txType"
                - "memo"
                - "consumedUtxos"
                - "emittedUtxos"
                - "amountUnlocked"
                - "amountCreated"
                - "vertices"
        "XChainLinearTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "chainFormat":
                    type: "string"
                    description: "Represents chain format this transaction is included in."
                    enum:
                        - "non-linear"
                        - "linear"
                    example: "non-linear"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices."
                    example: 1600762738
                "txType": {"example": "BaseTx", "$ref": "#/components/schemas/XChainTransactionType"}
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "amountUnlocked":
                    description: "Assets unlocked by inputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountCreated":
                    description: "Assets created by outputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "assetCreated":
                    description: "AssetAmount details of the asset created in CreateAssetTx"
                    allOf:
                        - {"$ref": "#/components/schemas/XChainAssetDetails"}
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
            required:
                - "txHash"
                - "chainFormat"
                - "timestamp"
                - "txType"
                - "memo"
                - "consumedUtxos"
                - "emittedUtxos"
                - "amountUnlocked"
                - "amountCreated"
                - "blockHeight"
                - "blockHash"
        "EVMInput":
            type: "object"
            properties:
                "fromAddress":
                    type: "string"
                    description: "EVM address from which the asset is exported in ExportTx."
                    example: "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
                "asset":
                    description: "AssetAmount details for the asset being transferred."
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
                "credentials":
                    description: "Credentials that signed this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/UtxoCredential"}
            required:
                - "fromAddress"
                - "asset"
                - "credentials"
        "CChainExportTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted."
                    example: 1600762738
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "amountUnlocked":
                    description: "Assets unlocked by inputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountCreated":
                    description: "Assets created by outputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "txType":
                    type: "string"
                    description: "Type of transaction."
                    enum:
                        - "ExportTx"
                    example: "ExportTx"
                "evmInputs":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EVMInput"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
            required:
                - "txHash"
                - "blockHeight"
                - "blockHash"
                - "timestamp"
                - "memo"
                - "amountUnlocked"
                - "amountCreated"
                - "sourceChain"
                - "destinationChain"
                - "txType"
                - "evmInputs"
                - "emittedUtxos"
        "EVMOutput":
            type: "object"
            properties:
                "toAddress":
                    type: "string"
                    description: "EVM address to which the asset is imported in ImportTx"
                    example: "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
                "asset":
                    description: "AssetAmount details for the asset being transferred."
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
            required:
                - "toAddress"
                - "asset"
        "CChainImportTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted."
                    example: 1600762738
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "amountUnlocked":
                    description: "Assets unlocked by inputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "amountCreated":
                    description: "Assets created by outputs of this transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "txType":
                    type: "string"
                    description: "Type of transaction."
                    enum:
                        - "ImportTx"
                    example: "ImportTx"
                "evmOutputs":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EVMOutput"}
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
            required:
                - "txHash"
                - "blockHeight"
                - "blockHash"
                - "timestamp"
                - "memo"
                - "amountUnlocked"
                - "amountCreated"
                - "sourceChain"
                - "destinationChain"
                - "txType"
                - "evmOutputs"
                - "consumedUtxos"
        "BlockchainId":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                - "p-chain"
                - "x-chain"
                - "c-chain"
        "Network":
            type: "string"
            enum:
                - "mainnet"
                - "fuji"
        "PrimaryNetworkChainName":
            type: "string"
            enum:
                - "p-chain"
                - "x-chain"
                - "c-chain"
        "PrimaryNetwork":
            type: "string"
            enum:
                - "mainnet"
                - "fuji"
        "PrimaryNetworkChainInfo":
            type: "object"
            properties:
                "chainName": {"$ref": "#/components/schemas/PrimaryNetworkChainName"}
                "network": {"$ref": "#/components/schemas/PrimaryNetwork"}
            required:
                - "chainName"
                - "network"
        "ListPChainTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "ListXChainTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items:
                        anyOf:
                            - {"$ref": "#/components/schemas/XChainNonLinearTransaction"}
                            - {"$ref": "#/components/schemas/XChainLinearTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "ListCChainAtomicTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items:
                        anyOf:
                            - {"$ref": "#/components/schemas/CChainExportTransaction"}
                            - {"$ref": "#/components/schemas/CChainImportTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "PrimaryNetworkTxType":
            type: "string"
            enum:
                - "AddValidatorTx"
                - "AddSubnetValidatorTx"
                - "AddDelegatorTx"
                - "CreateChainTx"
                - "CreateSubnetTx"
                - "ImportTx"
                - "ExportTx"
                - "AdvanceTimeTx"
                - "RewardValidatorTx"
                - "RemoveSubnetValidatorTx"
                - "TransformSubnetTx"
                - "AddPermissionlessValidatorTx"
                - "AddPermissionlessDelegatorTx"
                - "BaseTx"
                - "TransferSubnetOwnershipTx"
                - "UNKNOWN"
                - "CreateAssetTx"
                - "OperationTx"
        "SortOrder":
            type: "string"
            enum:
                - "asc"
                - "desc"
        "PChainId":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "p-chain"
        "PendingReward":
            type: "object"
            properties:
                "addresses":
                    description: "An array of P-Chain wallet addresses."
                    example: ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"]
                    type: "array"
                    items:
                        type: "string"
                "txHash":
                    type: "string"
                "amountStaked":
                    type: "string"
                "nodeId":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "progress":
                    type: "number"
                "estimatedReward":
                    description: "An object containing P-chain Asset basic info and the amount of that Asset ID."
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
            required:
                - "addresses"
                - "txHash"
                - "amountStaked"
                - "nodeId"
                - "startTimestamp"
                - "endTimestamp"
                - "rewardType"
                - "progress"
                - "estimatedReward"
        "ListPendingRewardsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "pendingRewards":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PendingReward"}
            required:
                - "pendingRewards"
        "CurrencyCode":
            type: "string"
            description: "ISO 4217 currency code."
            enum:
                - "usd"
                - "eur"
                - "aud"
                - "cad"
                - "chf"
                - "clp"
                - "cny"
                - "czk"
                - "dkk"
                - "gbp"
                - "hkd"
                - "huf"
                - "jpy"
                - "nzd"
        "Money":
            type: "object"
            properties:
                "currencyCode": {"example": "usd", "$ref": "#/components/schemas/CurrencyCode"}
                "value":
                    type: "number"
                    description: "Monetary value in base 10 decimals."
                    example: "42.42"
            required:
                - "currencyCode"
                - "value"
        "AssetWithPriceInfo":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "historicalPrice":
                    description: "The historical asset price at the time the reward was granted, if available. Note, this is only provided if the reward occured more than 24 hours ago."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
        "HistoricalReward":
            type: "object"
            properties:
                "addresses":
                    description: "An array of P-Chain wallet addresses."
                    example: ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"]
                    type: "array"
                    items:
                        type: "string"
                "txHash":
                    type: "string"
                "amountStaked":
                    type: "string"
                "nodeId":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "utxoId":
                    type: "string"
                "outputIndex":
                    type: "number"
                "reward": {"$ref": "#/components/schemas/AssetWithPriceInfo"}
                "rewardTxHash":
                    type: "string"
            required:
                - "addresses"
                - "txHash"
                - "amountStaked"
                - "nodeId"
                - "startTimestamp"
                - "endTimestamp"
                - "rewardType"
                - "utxoId"
                - "outputIndex"
                - "reward"
                - "rewardTxHash"
        "ListHistoricalRewardsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "historicalRewards":
                    type: "array"
                    items: {"$ref": "#/components/schemas/HistoricalReward"}
            required:
                - "historicalRewards"
        "ListPChainUtxosResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "utxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "utxos"
                - "chainInfo"
        "ListUtxosResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "utxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "utxos"
                - "chainInfo"
        "AggregatedAssetAmount":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
        "PChainSharedAsset":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "status":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
                - "status"
        "PChainBalance":
            type: "object"
            properties:
                "unlockedUnstaked":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is consumable by any transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "unlockedStaked":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax that is consumable by any transaction when the staking period ends."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "lockedPlatform":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is locked at the platform level and not consumable by any transaction at the current time."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "lockedStakeable":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is locked at the platform level and only consumeable for staking transactions."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "lockedStaked":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax that will be locked when the staking period ends."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "pendingStaked":
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax whose staking period has not yet started."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "atomicMemoryUnlocked":
                    description: "A list of objects containing P-chain Asset basic info, amount and utxo count of that Asset ID. Denotes the amount of unlocked Avax in the atomic memory between P-Chain and other chain."
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainSharedAsset"}
                "atomicMemoryLocked":
                    description: "A list of objects containing P-chain Asset basic info, amount and utxo count of that Asset ID. Denotes the amount of locked Avax in the atomic memory between P-Chain and other chain."
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainSharedAsset"}
            required:
                - "unlockedUnstaked"
                - "unlockedStaked"
                - "lockedPlatform"
                - "lockedStakeable"
                - "lockedStaked"
                - "pendingStaked"
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListPChainBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/PChainBalance"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "XChainSharedAssetBalance":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
        "XChainBalances":
            type: "object"
            properties:
                "locked":
                    description: "A list of objects containing X-chain Asset balance information."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "unlocked":
                    description: "A list of objects containing X-chain Asset balance information."
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                "atomicMemoryUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainSharedAssetBalance"}
                "atomicMemoryLocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainSharedAssetBalance"}
            required:
                - "locked"
                - "unlocked"
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListXChainBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/XChainBalances"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "CChainSharedAssetBalance":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
        "CChainAtomicBalances":
            type: "object"
            properties:
                "atomicMemoryUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/CChainSharedAssetBalance"}
                "atomicMemoryLocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/CChainSharedAssetBalance"}
            required:
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListCChainAtomicBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/CChainAtomicBalances"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "ProposerDetails":
            type: "object"
            properties:
                "proposerId":
                    type: "string"
                "proposerParentId":
                    type: "string"
                "proposerNodeId":
                    type: "string"
                "proposerPChainHeight":
                    type: "number"
                "proposerTimestamp":
                    type: "number"
        "GetPrimaryNetworkBlockResponse":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "parentHash":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "blockType":
                    type: "string"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "blockSizeBytes":
                    type: "number"
                "currentSupply":
                    type: "string"
                "proposerDetails": {"$ref": "#/components/schemas/ProposerDetails"}
            required:
                - "blockNumber"
                - "blockHash"
                - "parentHash"
                - "blockTimestamp"
                - "blockType"
                - "txCount"
                - "transactions"
                - "blockSizeBytes"
        "PrimaryNetworkBlock":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "parentHash":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "blockType":
                    type: "string"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "blockSizeBytes":
                    type: "number"
                "currentSupply":
                    type: "string"
                "proposerDetails": {"$ref": "#/components/schemas/ProposerDetails"}
            required:
                - "blockNumber"
                - "blockHash"
                - "parentHash"
                - "blockTimestamp"
                - "blockType"
                - "txCount"
                - "transactions"
                - "blockSizeBytes"
        "ListPrimaryNetworkBlocksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blocks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkBlock"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "blocks"
                - "chainInfo"
        "XChainId":
            type: "string"
            enum:
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "x-chain"
        "XChainVertex":
            type: "object"
            properties:
                "vertexHash":
                    type: "string"
                "parentHashes":
                    type: "array"
                    items:
                        type: "string"
                "vertexHeight":
                    type: "number"
                "vertexIndex":
                    type: "number"
                "vertexTimestamp":
                    type: "number"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "vertexSizeBytes":
                    type: "number"
            required:
                - "vertexHash"
                - "parentHashes"
                - "vertexHeight"
                - "vertexIndex"
                - "vertexTimestamp"
                - "txCount"
                - "transactions"
                - "vertexSizeBytes"
        "ListXChainVerticesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "vertices":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainVertex"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "vertices"
                - "chainInfo"
        "BlockchainIds":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
        "ChainAddressChainIdMap":
            type: "object"
            properties:
                "address":
                    type: "string"
                "blockchainIds":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BlockchainIds"}
            required:
                - "address"
                - "blockchainIds"
        "ChainAddressChainIdMapListResponse":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ChainAddressChainIdMap"}
            required:
                - "addresses"
        "StakingDistribution":
            type: "object"
            properties:
                "version":
                    type: "string"
                "amountStaked":
                    type: "string"
                "validatorCount":
                    type: "number"
            required:
                - "version"
                - "amountStaked"
                - "validatorCount"
        "ValidatorsDetails":
            type: "object"
            properties:
                "validatorCount":
                    type: "number"
                "totalAmountStaked":
                    type: "string"
                "estimatedAnnualStakingReward":
                    type: "string"
                "stakingDistributionByVersion":
                    type: "array"
                    items: {"$ref": "#/components/schemas/StakingDistribution"}
                "stakingRatio":
                    type: "string"
            required:
                - "validatorCount"
                - "totalAmountStaked"
                - "estimatedAnnualStakingReward"
                - "stakingDistributionByVersion"
                - "stakingRatio"
        "DelegatorsDetails":
            type: "object"
            properties:
                "delegatorCount":
                    type: "number"
                "totalAmountStaked":
                    type: "string"
            required:
                - "delegatorCount"
                - "totalAmountStaked"
        "GetNetworkDetailsResponse":
            type: "object"
            properties:
                "validatorDetails": {"$ref": "#/components/schemas/ValidatorsDetails"}
                "delegatorDetails": {"$ref": "#/components/schemas/DelegatorsDetails"}
            required:
                - "validatorDetails"
                - "delegatorDetails"
        "Blockchain":
            type: "object"
            properties:
                "createBlockTimestamp":
                    type: "number"
                "createBlockNumber":
                    type: "string"
                "blockchainId":
                    type: "string"
                "vmId":
                    type: "string"
                "subnetId":
                    type: "string"
                "blockchainName":
                    type: "string"
            required:
                - "createBlockTimestamp"
                - "createBlockNumber"
                - "blockchainId"
                - "vmId"
                - "subnetId"
                - "blockchainName"
        "ListBlockchainsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blockchains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Blockchain"}
            required:
                - "blockchains"
        "BlockchainInfo":
            type: "object"
            properties:
                "blockchainId":
                    type: "string"
            required:
                - "blockchainId"
        "Subnet":
            type: "object"
            properties:
                "createBlockTimestamp":
                    type: "number"
                "createBlockIndex":
                    type: "string"
                "subnetId":
                    type: "string"
                "ownerAddresses":
                    deprecated: true
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                    type: "array"
                    items:
                        type: "string"
                "threshold":
                    type: "number"
                    deprecated: true
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                "locktime":
                    type: "number"
                    deprecated: true
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                "subnetOwnershipInfo":
                    description: "Latest subnet owner details for this Subnet."
                    allOf:
                        - {"$ref": "#/components/schemas/SubnetOwnershipInfo"}
                "blockchains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BlockchainInfo"}
            required:
                - "createBlockTimestamp"
                - "createBlockIndex"
                - "subnetId"
                - "ownerAddresses"
                - "threshold"
                - "locktime"
                - "subnetOwnershipInfo"
                - "blockchains"
        "ListSubnetsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "subnets":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Subnet"}
            required:
                - "subnets"
        "SortByOption":
            type: "string"
            enum:
                - "blockIndex"
                - "delegationCapacity"
                - "timeRemaining"
                - "delegationFee"
                - "uptimePerformance"
        "ValidationStatusType":
            type: "string"
            enum:
                - "completed"
                - "active"
                - "pending"
                - "removed"
        "Rewards":
            type: "object"
            properties:
                "validationRewardAmount":
                    type: "string"
                "delegationRewardAmount":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "rewardTxHash":
                    type: "string"
            required:
                - "validationRewardAmount"
                - "delegationRewardAmount"
        "CompletedValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    description: "Present for AddPermissionlessValidatorTx"
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                "delegatorCount":
                    type: "number"
                "rewards": {"$ref": "#/components/schemas/Rewards"}
                "validationStatus":
                    type: "string"
                    enum:
                        - "completed"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "delegatorCount"
                - "rewards"
                - "validationStatus"
        "ValidatorHealthDetails":
            type: "object"
            properties:
                "reachabilityPercent":
                    type: "number"
                    description: "Percent of requests responded to in last polling."
                "benchedPChainRequestsPercent":
                    type: "number"
                    description: "Percent of requests benched on the P-Chain in last polling."
                "benchedXChainRequestsPercent":
                    type: "number"
                    description: "Percentage of requests benched on the X-Chain in last polling."
                "benchedCChainRequestsPercent":
                    type: "number"
                    description: "Percentage of requests benched on the C-Chain in last polling."
            required:
                - "reachabilityPercent"
                - "benchedPChainRequestsPercent"
                - "benchedXChainRequestsPercent"
                - "benchedCChainRequestsPercent"
        "ActiveValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    description: "Present for AddPermissionlessValidatorTx"
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                "stakePercentage":
                    type: "number"
                "delegatorCount":
                    type: "number"
                "amountDelegated":
                    type: "string"
                "uptimePerformance":
                    type: "number"
                "avalancheGoVersion":
                    type: "string"
                "delegationCapacity":
                    type: "string"
                "potentialRewards": {"$ref": "#/components/schemas/Rewards"}
                "validationStatus":
                    type: "string"
                    enum:
                        - "active"
                "validatorHealth": {"$ref": "#/components/schemas/ValidatorHealthDetails"}
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "stakePercentage"
                - "delegatorCount"
                - "uptimePerformance"
                - "potentialRewards"
                - "validationStatus"
                - "validatorHealth"
        "PendingValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    description: "Present for AddPermissionlessValidatorTx"
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                "validationStatus":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "validationStatus"
        "RemovedValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    description: "Present for AddPermissionlessValidatorTx"
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                "removeTxHash":
                    type: "string"
                "removeTimestamp":
                    type: "number"
                "validationStatus":
                    type: "string"
                    enum:
                        - "removed"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "removeTxHash"
                - "removeTimestamp"
                - "validationStatus"
        "ListValidatorDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "validators":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/CompletedValidatorDetails"}
                            - {"$ref": "#/components/schemas/ActiveValidatorDetails"}
                            - {"$ref": "#/components/schemas/PendingValidatorDetails"}
                            - {"$ref": "#/components/schemas/RemovedValidatorDetails"}
                        discriminator:
                            propertyName: "validationStatus"
                            mapping:
                                "active": "#/components/schemas/ActiveValidatorDetails"
                                "pending": "#/components/schemas/PendingValidatorDetails"
                                "completed": "#/components/schemas/CompletedValidatorDetails"
                                "removed": "#/components/schemas/RemovedValidatorDetails"
                    description: "The list of validator Details."
            required:
                - "validators"
        "DelegationStatusType":
            type: "string"
            enum:
                - "completed"
                - "active"
                - "pending"
        "CompletedDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "grossReward":
                    type: "string"
                "netReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "completed"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "grossReward"
                - "netReward"
                - "delegationStatus"
        "ActiveDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "estimatedGrossReward":
                    type: "string"
                "estimatedNetReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "active"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "estimatedGrossReward"
                - "estimatedNetReward"
                - "delegationStatus"
        "PendingDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "estimatedGrossReward":
                    type: "string"
                "estimatedNetReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "estimatedGrossReward"
                - "estimatedNetReward"
                - "delegationStatus"
        "ListDelegatorDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "delegators":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/CompletedDelegatorDetails"}
                            - {"$ref": "#/components/schemas/ActiveDelegatorDetails"}
                            - {"$ref": "#/components/schemas/PendingDelegatorDetails"}
                        discriminator:
                            propertyName: "delegationStatus"
                            mapping:
                                "active": "#/components/schemas/ActiveDelegatorDetails"
                                "pending": "#/components/schemas/PendingDelegatorDetails"
                                "completed": "#/components/schemas/CompletedDelegatorDetails"
                    description: "The list of Delegator Details."
            required:
                - "delegators"
        "TimeIntervalGranularityExtended":
            type: "string"
            enum:
                - "minute"
                - "hourly"
                - "daily"
                - "weekly"
                - "monthly"
        "UsageMetricsGroupByEnum":
            type: "string"
            enum:
                - "requestPath"
                - "responseCode"
                - "chainId"
                - "apiKeyId"
        "UsageMetricsValueDTO":
            type: "object"
            properties:
                "groupedBy":
                    type: "string"
                    description: "Column name used for data aggregation"
                    enum:
                        - "requestPath"
                        - "responseCode"
                        - "chainId"
                        - "apiKeyId"
                        - "None"
                "groupValue":
                    description: "The value of the column used for data aggregation"
                    oneOf:
                        - type: "string"
                        - type: "number"
                "totalRequests":
                    type: "number"
                    description: "The total number of requests"
                "requestsPerSecond":
                    type: "number"
                    description: "The number of requests per second"
                "successRatePercent":
                    type: "number"
                    description: "The success rate percentage"
                "medianResponseTimeMsecs":
                    type: "number"
                    description: "The median response time in milliseconds"
                "invalidRequests":
                    type: "number"
                    description: "The number of invalid requests"
                "apiCreditsUsed":
                    type: "number"
                    description: "The number of API credits used"
                "apiCreditsWasted":
                    type: "number"
                    description: "The number of API credits wasted on invalid requests"
            required:
                - "groupedBy"
                - "totalRequests"
                - "requestsPerSecond"
                - "successRatePercent"
                - "medianResponseTimeMsecs"
                - "invalidRequests"
                - "apiCreditsUsed"
                - "apiCreditsWasted"
        "Metric":
            type: "object"
            properties:
                "timestamp":
                    type: "number"
                    description: "The timestamp of the metrics value"
                "values":
                    description: "The metrics values for the timestamp"
                    type: "array"
                    items: {"$ref": "#/components/schemas/UsageMetricsValueDTO"}
            required:
                - "timestamp"
                - "values"
        "UsageMetricsResponseDTO":
            type: "object"
            properties:
                "aggregateDuration":
                    type: "string"
                    description: "Duration in which the metrics value is aggregated"
                "orgId":
                    type: "string"
                    description: "Org ID for which the metrics are aggregated"
                "metrics":
                    description: "Metrics values"
                    type: "array"
                    items: {"$ref": "#/components/schemas/Metric"}
            required:
                - "aggregateDuration"
                - "orgId"
                - "metrics"
        "RequestType":
            type: "string"
            description: "The type of request made by the client."
            enum:
                - "Glacier API Request"
                - "Glacier RPC Request"
        "LogsFormatMetadata":
            type: "object"
            properties:
                "ipAddress":
                    type: "string"
                    description: "The IP address of the client that made the request."
                "host":
                    type: "string"
                    description: "The host for the request made by the client."
                "userAgent":
                    type: "string"
                    description: "The user agent of the client that made the request."
            required:
                - "ipAddress"
                - "host"
                - "userAgent"
        "LogsFormat":
            type: "object"
            properties:
                "orgId":
                    type: "string"
                    description: "The organization id of the request."
                "logId":
                    type: "string"
                    description: "The unique log id of the request."
                "eventTimestamp":
                    type: "number"
                    description: "The timestamp of the request."
                "apiKeyId":
                    type: "string"
                    description: "The apiKey used to make the request."
                "apiKeyAlias":
                    type: "string"
                    description: "The alias of the apiKey used to make the request."
                "hostRegion":
                    type: "string"
                    description: "The region of the host for the request made by the client."
                "requestType": {"example": "Glacier API Request", "$ref": "#/components/schemas/RequestType"}
                "requestPath":
                    type: "string"
                    description: "The path of the request made by the client."
                "apiCreditsConsumed":
                    type: "number"
                    description: "The number of API credits consumed by the request."
                "requestDurationMsecs":
                    type: "number"
                    description: "The duration of the request in milliseconds."
                "responseCode":
                    type: "number"
                    description: "The response code of the request."
                "chainId":
                    type: "string"
                    description: "The chain id of the request."
                "rpcMethod":
                    type: "string"
                    description: "The rpc method of the request."
                "metadata":
                    description: "The metadata of the request."
                    allOf:
                        - {"$ref": "#/components/schemas/LogsFormatMetadata"}
            required:
                - "orgId"
                - "logId"
                - "eventTimestamp"
                - "apiKeyId"
                - "apiKeyAlias"
                - "hostRegion"
                - "requestType"
                - "requestPath"
                - "apiCreditsConsumed"
                - "requestDurationMsecs"
                - "responseCode"
                - "metadata"
        "LogsResponseDTO":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "orgId":
                    type: "string"
                    description: "The organization id of the request."
                "logs":
                    description: "An array of logs representing the requests made by clients."
                    type: "array"
                    items: {"$ref": "#/components/schemas/LogsFormat"}
            required:
                - "orgId"
                - "logs"
        "EventType":
            type: "string"
            enum:
                - "address_activity"
        "CreateWebhookRequest":
            type: "object"
            properties:
                "url":
                    type: "string"
                "chainId":
                    type: "string"
                "eventType": {"$ref": "#/components/schemas/EventType"}
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/AddressActivityMetadata"}
                "name":
                    type: "string"
                "description":
                    type: "string"
                "includeInternalTxs":
                    type: "boolean"
                    description: "Whether to include traces in the webhook payload."
                "includeLogs":
                    type: "boolean"
                    description: "Whether to include logs in the webhook payload."
            required:
                - "url"
                - "chainId"
                - "eventType"
                - "metadata"
        "AddressActivityMetadata":
            type: "object"
            properties:
                "addresses":
                    description: "Ethereum address(es) for the address_activity event type"
                    example: ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]
                    type: "array"
                    items:
                        type: "string"
                "eventSignatures":
                    description: "Array of hexadecimal strings of the event signatures."
                    example: ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]
                    type: "array"
                    items:
                        type: "string"
            required:
                - "addresses"
        "WebhookStatusType":
            type: "string"
            enum:
                - "active"
                - "inactive"
        "WebhookResponse":
            type: "object"
            properties:
                "id":
                    type: "string"
                "eventType": {"$ref": "#/components/schemas/EventType"}
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/AddressActivityMetadata"}
                "includeInternalTxs":
                    type: "boolean"
                    description: "Whether to include traces in the webhook payload."
                "includeLogs":
                    type: "boolean"
                    description: "Whether to include logs in the webhook payload."
                "url":
                    type: "string"
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/WebhookStatusType"}
                "createdAt":
                    type: "number"
                "name":
                    type: "string"
                "description":
                    type: "string"
            required:
                - "id"
                - "eventType"
                - "metadata"
                - "url"
                - "chainId"
                - "status"
                - "createdAt"
                - "name"
                - "description"
        "WebhookStatus":
            type: "string"
            enum:
                - "active"
                - "inactive"
        "ListWebhooksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "webhooks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebhookResponse"}
            required:
                - "webhooks"
        "SharedSecretsResponse":
            type: "object"
            properties:
                "secret":
                    type: "string"
            required:
                - "secret"
        "UpdateWebhookRequest":
            type: "object"
            properties:
                "name":
                    type: "string"
                "description":
                    type: "string"
                "url":
                    type: "string"
                "status": {"$ref": "#/components/schemas/WebhookStatusType"}
                "includeInternalTxs":
                    type: "boolean"
                "includeLogs":
                    type: "boolean"
        "AddressesChangeRequest":
            type: "object"
            properties:
                "addresses":
                    description: "Ethereum address(es) for the address_activity event type"
                    example: ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]
                    type: "array"
                    items:
                        type: "string"
            required:
                - "addresses"
        "ListWebhookAddressesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "totalAddresses":
                    type: "number"
            required:
                - "addresses"
                - "totalAddresses"
        "TeleporterReceipt":
            type: "object"
            properties:
                "receivedMessageNonce":
                    type: "string"
                "relayerRewardAddress":
                    type: "string"
            required:
                - "receivedMessageNonce"
                - "relayerRewardAddress"
        "TeleporterRewardDetails":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    description: "The token price, if available."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                "value":
                    type: "string"
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
                - "value"
        "TeleporterSourceTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "timestamp":
                    type: "number"
                "gasSpent":
                    type: "string"
            required:
                - "txHash"
                - "timestamp"
                - "gasSpent"
        "PendingTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "sourceTransaction": {"$ref": "#/components/schemas/TeleporterSourceTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "sourceTransaction"
                - "status"
        "TeleporterDestinationTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "timestamp":
                    type: "number"
                "gasSpent":
                    type: "string"
                "rewardRedeemer":
                    type: "string"
                "delivererAddress":
                    type: "string"
            required:
                - "txHash"
                - "timestamp"
                - "gasSpent"
                - "rewardRedeemer"
                - "delivererAddress"
        "DeliveredTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "sourceTransaction": {"$ref": "#/components/schemas/TeleporterSourceTransaction"}
                "destinationTransaction": {"$ref": "#/components/schemas/TeleporterDestinationTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "delivered"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "sourceTransaction"
                - "destinationTransaction"
                - "status"
        "DeliveredSourceNotIndexedTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "destinationTransaction": {"$ref": "#/components/schemas/TeleporterDestinationTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "delivered_source_not_indexed"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "destinationTransaction"
                - "status"
        "NextPageToken":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
        "NetworkType":
            type: "string"
            enum:
                - "mainnet"
                - "testnet"
        "ListTeleporterMessagesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "messages":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/PendingTeleporterMessage"}
                            - {"$ref": "#/components/schemas/DeliveredTeleporterMessage"}
                        discriminator:
                            propertyName: "status"
                            mapping:
                                "pending": "#/components/schemas/PendingTeleporterMessage"
                                "delivered": "#/components/schemas/DeliveredTeleporterMessage"
            required:
                - "messages"
        "NativeTokenBalance":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "price":
                    description: "The token price, if available."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
                "balanceValue":
                    description: "The monetary value of the balance, if a price is available for the token."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
            required:
                - "name"
                - "symbol"
                - "decimals"
                - "chainId"
                - "balance"
        "GetNativeBalanceResponse":
            type: "object"
            properties:
                "nativeTokenBalance":
                    description: "The native token balance for the address."
                    allOf:
                        - {"$ref": "#/components/schemas/NativeTokenBalance"}
            required:
                - "nativeTokenBalance"
        "Erc20TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    description: "The token price, if available."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
                "balanceValue":
                    description: "The monetary value of the balance, if a price is available for the token."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
                - "chainId"
                - "balance"
        "ListErc20BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc20TokenBalances":
                    description: "The list of ERC-20 token balances for the address."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TokenBalance"}
            required:
                - "erc20TokenBalances"
        "Erc721TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc721TokenMetadata"}
                "ownerAddress":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
            required:
                - "address"
                - "name"
                - "symbol"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
                - "chainId"
        "ListErc721BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc721TokenBalances":
                    description: "The list of ERC-721 token balances for the address."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TokenBalance"}
            required:
                - "erc721TokenBalances"
        "Erc1155TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc1155TokenMetadata"}
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
            required:
                - "address"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
                - "chainId"
                - "balance"
        "ListErc1155BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc1155TokenBalances":
                    description: "The list of ERC-1155 token balances for the address."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TokenBalance"}
            required:
                - "erc1155TokenBalances"
        "ListCollectibleBalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "collectibleBalances":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721TokenBalance"}
                            - {"$ref": "#/components/schemas/Erc1155TokenBalance"}
                    description: "The list of ERC-721 and ERC-1155 token balances for the address."
            required:
                - "collectibleBalances"
        "EvmBlock":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txCount":
                    type: "number"
                    description: "The number of evm transactions in the block."
                "baseFee":
                    type: "string"
                    description: "The base gas fee for a transaction to be included in the block."
                "gasUsed":
                    type: "string"
                    description: "The gas used for transactions in the block."
                "gasLimit":
                    type: "string"
                    description: "The total gas limit set for transactions in the block."
                "gasCost":
                    type: "string"
                "parentHash":
                    type: "string"
                    description: "The hash of the parent block."
                "feesSpent":
                    type: "string"
                    description: "The amount of fees spent/burned for transactions in the block."
                "cumulativeTransactions":
                    type: "string"
                    description: "The cumulative number of transactions for the chain including this block."
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txCount"
                - "baseFee"
                - "gasUsed"
                - "gasLimit"
                - "gasCost"
                - "parentHash"
                - "feesSpent"
                - "cumulativeTransactions"
        "ListEvmBlocksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blocks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EvmBlock"}
            required:
                - "blocks"
        "GetEvmBlockResponse":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txCount":
                    type: "number"
                    description: "The number of evm transactions in the block."
                "baseFee":
                    type: "string"
                    description: "The base gas fee for a transaction to be included in the block."
                "gasUsed":
                    type: "string"
                    description: "The gas used for transactions in the block."
                "gasLimit":
                    type: "string"
                    description: "The total gas limit set for transactions in the block."
                "gasCost":
                    type: "string"
                "parentHash":
                    type: "string"
                    description: "The hash of the parent block."
                "feesSpent":
                    type: "string"
                    description: "The amount of fees spent/burned for transactions in the block."
                "cumulativeTransactions":
                    type: "string"
                    description: "The cumulative number of transactions for the chain including this block."
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txCount"
                - "baseFee"
                - "gasUsed"
                - "gasLimit"
                - "gasCost"
                - "parentHash"
                - "feesSpent"
                - "cumulativeTransactions"
        "RichAddress":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            required:
                - "address"
        "Erc20Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    description: "The token price, if available."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
        "Erc20TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc20Token": {"$ref": "#/components/schemas/Erc20Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc20Token"
        "Erc721TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "erc721Token": {"$ref": "#/components/schemas/Erc721Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "erc721Token"
        "Erc1155TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc1155Token": {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc1155Token"
        "InternalTransactionOpCall":
            type: "string"
            enum:
                - "UNKNOWN"
                - "CALL"
                - "CREATE"
                - "CREATE2"
                - "CALLCODE"
                - "DELEGATECALL"
                - "STATICCALL"
        "InternalTransactionDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "internalTxType": {"$ref": "#/components/schemas/InternalTransactionOpCall"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "isReverted":
                    type: "boolean"
                    description: "True if the internal transaction was reverted."
                "gasUsed":
                    type: "string"
                "gasLimit":
                    type: "string"
            required:
                - "from"
                - "to"
                - "internalTxType"
                - "value"
                - "isReverted"
                - "gasUsed"
                - "gasLimit"
        "NetworkToken":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "description":
                    type: "string"
            required:
                - "name"
                - "symbol"
                - "decimals"
        "NetworkTokenDetails":
            type: "object"
            properties:
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "currentPrice":
                    description: "The current token price, if available."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                "historicalPrice":
                    description: "The historical token price at the time the transaction occured, if available. Note, this is only provided if the transaction occured more than 24 hours ago."
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
            required:
                - "networkToken"
        "TransactionMethodType":
            type: "string"
            description: "The contract call type. NATIVE_TRANSFER indicates a transfer of the native token without any smart-contract interaction. CONTRACT_CALL indicates a smart-contract interaction. CONTRACT_CREATION indicates a smart-contract creation."
            enum:
                - "NATIVE_TRANSFER"
                - "CONTRACT_CALL"
                - "CONTRACT_CREATION"
        "Method":
            type: "object"
            properties:
                "callType": {"example": "CONTRACT_CALL", "$ref": "#/components/schemas/TransactionMethodType"}
                "methodHash":
                    type: "string"
                    description: "The contract method hash identifier. The method hash is only set if the `callType` is `CONTRACT_CALL`."
                    example: "0xa9059cbb"
                "methodName":
                    type: "string"
                    description: "The contract method name including parameter types. If the `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If the `callType` is `CONTRACT_CREATION` this is set to 'Contract Created'."
                    example: "transfer(address,uint256)"
            required:
                - "callType"
                - "methodHash"
        "FullNativeTransactionDetails":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "blockIndex":
                    type: "number"
                    description: "The index at which the transaction occured in the block (0-indexed)."
                    example: 0
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "txStatus":
                    type: "string"
                    description: "The transaction status, which is either 0 (failed) or 1 (successful)."
                    example: "1"
                "txType":
                    type: "number"
                    description: "The transaction type."
                    example: 1
                "gasLimit":
                    type: "string"
                    description: "The gas limit set for the transaction."
                    example: "51373"
                "gasUsed":
                    type: "string"
                    description: "The amount of gas used."
                    example: "51373"
                "gasPrice":
                    type: "string"
                    description: "The gas price denominated by the number of decimals of the native token."
                    example: "470000000000"
                "nonce":
                    type: "string"
                    description: "The nonce used by the sender of the transaction."
                    example: "1"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "method": {"$ref": "#/components/schemas/Method"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "input":
                    type: "string"
                    description: "The data sent for the transaction."
                "baseFeePerGas":
                    type: "string"
                "maxFeePerGas":
                    type: "string"
                "maxPriorityFeePerGas":
                    type: "string"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "blockIndex"
                - "txHash"
                - "txStatus"
                - "txType"
                - "gasLimit"
                - "gasUsed"
                - "gasPrice"
                - "nonce"
                - "from"
                - "to"
                - "value"
                - "input"
                - "baseFeePerGas"
        "GetTransactionResponse":
            type: "object"
            properties:
                "erc20Transfers":
                    description: "The list of ERC-20 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TransferDetails"}
                "erc721Transfers":
                    description: "The list of ERC-721 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TransferDetails"}
                "erc1155Transfers":
                    description: "The list of ERC-1155 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TransferDetails"}
                "internalTransactions":
                    description: "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransactionDetails"}
                "networkTokenDetails": {"$ref": "#/components/schemas/NetworkTokenDetails"}
                "nativeTransaction": {"$ref": "#/components/schemas/FullNativeTransactionDetails"}
            required:
                - "networkTokenDetails"
                - "nativeTransaction"
        "ImageAsset":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                "imageUri":
                    type: "string"
                    description: "OUTPUT ONLY"
        "ResourceLinkType":
            type: "string"
            enum:
                - "Blog"
                - "CoinGecko"
                - "CoinMarketCap"
                - "Discord"
                - "Documentation"
                - "Facebook"
                - "Github"
                - "Instagram"
                - "LinkedIn"
                - "Medium"
                - "Reddit"
                - "Support"
                - "Telegram"
                - "TikTok"
                - "Twitter"
                - "Website"
                - "Whitepaper"
                - "Youtube"
        "ResourceLink":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/ResourceLinkType"}
                "url":
                    type: "string"
            required:
                - "type"
                - "url"
        "ContractDeploymentDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "deployerAddress":
                    type: "string"
                    description: "The address that initiated the transaction which deployed this contract."
                "deployerContractAddress":
                    type: "string"
                    description: "The contract address which deployed this contract via smart contract. This field is only populated when the contract was deployed as part of smart contract execution."
            required:
                - "txHash"
                - "deployerAddress"
        "UnknownContract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "UNKNOWN"
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "PricingProviders":
            type: "object"
            properties:
                "coingeckoCoinId":
                    type: "string"
        "Erc20Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
                - "decimals"
        "Erc721Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "Erc1155Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "ListContractsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "contracts":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721Contract"}
                            - {"$ref": "#/components/schemas/Erc1155Contract"}
                            - {"$ref": "#/components/schemas/Erc20Contract"}
                            - {"$ref": "#/components/schemas/UnknownContract"}
                        discriminator:
                            propertyName: "ercType"
                            mapping:
                                "ERC-721": "#/components/schemas/Erc721Contract"
                                "ERC-1155": "#/components/schemas/Erc1155Contract"
                                "ERC-20": "#/components/schemas/Erc20Contract"
                                "UNKNOWN": "#/components/schemas/UnknownContract"
            required:
                - "contracts"
        "ContractSubmissionErc1155":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionErc20":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionErc721":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionUnknown":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "UNKNOWN"
            required:
                - "name"
                - "ercType"
        "ContractSubmissionBody":
            type: "object"
            properties:
                "contract":
                    oneOf:
                        - {"$ref": "#/components/schemas/ContractSubmissionErc1155"}
                        - {"$ref": "#/components/schemas/ContractSubmissionErc20"}
                        - {"$ref": "#/components/schemas/ContractSubmissionErc721"}
                        - {"$ref": "#/components/schemas/ContractSubmissionUnknown"}
                    discriminator:
                        propertyName: "ercType"
                        mapping:
                            "UNKNOWN": "#/components/schemas/ContractSubmissionUnknown"
                            "ERC-1155": "#/components/schemas/ContractSubmissionErc1155"
                            "ERC-20": "#/components/schemas/ContractSubmissionErc20"
                            "ERC-721": "#/components/schemas/ContractSubmissionErc721"
            required:
                - "contract"
        "UpdateContractResponse":
            type: "object"
            properties:
                "contract":
                    oneOf:
                        - {"$ref": "#/components/schemas/UnknownContract"}
                        - {"$ref": "#/components/schemas/Erc20Contract"}
                        - {"$ref": "#/components/schemas/Erc721Contract"}
                        - {"$ref": "#/components/schemas/Erc1155Contract"}
                    discriminator:
                        propertyName: "ercType"
                        mapping:
                            "UNKNOWN": "#/components/schemas/UnknownContract"
                            "ERC-20": "#/components/schemas/Erc20Contract"
                            "ERC-721": "#/components/schemas/Erc721Contract"
                            "ERC-1155": "#/components/schemas/Erc1155Contract"
            required:
                - "contract"
        "GlacierApiFeature":
            type: "string"
            enum:
                - "nftIndexing"
                - "webhooks"
        "ChainStatus":
            type: "string"
            description: "Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors."
            enum:
                - "OK"
                - "UNAVAILABLE"
        "VmName":
            type: "string"
            enum:
                - "EVM"
                - "BITCOIN"
                - "ETHEREUM"
        "UtilityAddresses":
            type: "object"
            properties:
                "multicall":
                    type: "string"
        "ChainInfo":
            type: "object"
            properties:
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/ChainStatus"}
                "chainName":
                    type: "string"
                "description":
                    type: "string"
                "platformChainId":
                    type: "string"
                "subnetId":
                    type: "string"
                "vmId":
                    type: "string"
                "vmName": {"$ref": "#/components/schemas/VmName"}
                "explorerUrl":
                    type: "string"
                "rpcUrl":
                    type: "string"
                "wsUrl":
                    type: "string"
                "isTestnet":
                    type: "boolean"
                "utilityAddresses": {"$ref": "#/components/schemas/UtilityAddresses"}
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "chainLogoUri":
                    type: "string"
                "private":
                    type: "boolean"
                "enabledFeatures":
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "nftIndexing"
                            - "webhooks"
            required:
                - "chainId"
                - "status"
                - "chainName"
                - "description"
                - "vmName"
                - "rpcUrl"
                - "isTestnet"
                - "networkToken"
        "ListChainsResponse":
            type: "object"
            properties:
                "chains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ChainInfo"}
            x-speakeasy-name-override: "GlacierListChainsResponse"
            required:
                - "chains"
        "GetChainResponse":
            type: "object"
            properties:
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/ChainStatus"}
                "chainName":
                    type: "string"
                "description":
                    type: "string"
                "platformChainId":
                    type: "string"
                "subnetId":
                    type: "string"
                "vmId":
                    type: "string"
                "vmName": {"$ref": "#/components/schemas/VmName"}
                "explorerUrl":
                    type: "string"
                "rpcUrl":
                    type: "string"
                "wsUrl":
                    type: "string"
                "isTestnet":
                    type: "boolean"
                "utilityAddresses": {"$ref": "#/components/schemas/UtilityAddresses"}
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "chainLogoUri":
                    type: "string"
                "private":
                    type: "boolean"
                "enabledFeatures":
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "nftIndexing"
                            - "webhooks"
            required:
                - "chainId"
                - "status"
                - "chainName"
                - "description"
                - "vmName"
                - "rpcUrl"
                - "isTestnet"
                - "networkToken"
        "Erc20Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc20Token": {"$ref": "#/components/schemas/Erc20Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc20Token"
        "Erc721Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "erc721Token": {"$ref": "#/components/schemas/Erc721Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "erc721Token"
        "Erc1155Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc1155Token": {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc1155Token"
        "ListTransfersResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transfers":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc20Transfer"}
                            - {"$ref": "#/components/schemas/Erc721Transfer"}
                            - {"$ref": "#/components/schemas/Erc1155Transfer"}
            required:
                - "transfers"
        "NativeTransaction":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "blockIndex":
                    type: "number"
                    description: "The index at which the transaction occured in the block (0-indexed)."
                    example: 0
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "txStatus":
                    type: "string"
                    description: "The transaction status, which is either 0 (failed) or 1 (successful)."
                    example: "1"
                "txType":
                    type: "number"
                    description: "The transaction type."
                    example: 1
                "gasLimit":
                    type: "string"
                    description: "The gas limit set for the transaction."
                    example: "51373"
                "gasUsed":
                    type: "string"
                    description: "The amount of gas used."
                    example: "51373"
                "gasPrice":
                    type: "string"
                    description: "The gas price denominated by the number of decimals of the native token."
                    example: "470000000000"
                "nonce":
                    type: "string"
                    description: "The nonce used by the sender of the transaction."
                    example: "1"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "method": {"$ref": "#/components/schemas/Method"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "blockIndex"
                - "txHash"
                - "txStatus"
                - "txType"
                - "gasLimit"
                - "gasUsed"
                - "gasPrice"
                - "nonce"
                - "from"
                - "to"
                - "value"
        "TransactionDetails":
            type: "object"
            properties:
                "nativeTransaction":
                    description: "The native (top-level) transaction details."
                    allOf:
                        - {"$ref": "#/components/schemas/NativeTransaction"}
                "erc20Transfers":
                    description: "The list of ERC-20 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TransferDetails"}
                "erc721Transfers":
                    description: "The list of ERC-721 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TransferDetails"}
                "erc1155Transfers":
                    description: "The list of ERC-1155 transfers."
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TransferDetails"}
                "internalTransactions":
                    description: "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction."
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransactionDetails"}
            required:
                - "nativeTransaction"
        "ListTransactionDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TransactionDetails"}
            required:
                - "transactions"
        "ListNativeTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/NativeTransaction"}
            required:
                - "transactions"
        "ListErc20TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20Transfer"}
            required:
                - "transactions"
        "ListErc721TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721Transfer"}
            required:
                - "transactions"
        "ListErc1155TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155Transfer"}
            required:
                - "transactions"
        "InternalTransaction":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "internalTxType": {"$ref": "#/components/schemas/InternalTransactionOpCall"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "isReverted":
                    type: "boolean"
                    description: "True if the internal transaction was reverted."
                "gasUsed":
                    type: "string"
                "gasLimit":
                    type: "string"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "internalTxType"
                - "value"
                - "isReverted"
                - "gasUsed"
                - "gasLimit"
        "ListInternalTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransaction"}
            required:
                - "transactions"
        "TransactionStatus":
            type: "string"
            enum:
                - "failed"
                - "success"
        "RpcSuccessResponseDto":
            type: "object"
            properties:
                "jsonrpc":
                    type: "string"
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "result":
                    type: "object"
            required:
                - "jsonrpc"
                - "result"
        "RpcErrorDto":
            type: "object"
            properties:
                "code":
                    type: "number"
                "message":
                    type: "string"
                "data":
                    type: "object"
            required:
                - "code"
                - "message"
        "RpcErrorResponseDto":
            type: "object"
            properties:
                "jsonrpc":
                    type: "string"
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "error": {"$ref": "#/components/schemas/RpcErrorDto"}
            required:
                - "jsonrpc"
                - "error"
        "RpcRequestBodyDto":
            type: "object"
            properties:
                "method":
                    type: "string"
                "params":
                    oneOf:
                        - type: "array"
                          items:
                            oneOf:
                                - type: "string"
                                - type: "number"
                                - type: "object"
                                  additionalProperties: true
                        - type: "object"
                          additionalProperties: true
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "jsonrpc":
                    type: "string"
            required:
                - "method"
    parameters:
        "ChainId":
            name: "chainId"
            in: "path"
            required: true
            description: "A supported EVM chain id, chain alias, or blockchain id."
            schema:
                type: "string"
                example: "43114"
        "Network":
            name: "network"
            in: "path"
            required: true
            description: "A supported network type mainnet or a testnet."
            schema:
                type: "string"
                example: "mainnet"
                enum:
                    - "mainnet"
                    - "fuji"
security:
    - GlacierApiKey: []
x-speakeasy-retries: {"strategy": "backoff", "backoff": {"initialInterval": 500, "maxInterval": 60000, "maxElapsedTime": 120000, "exponent": 1.5}, "statusCodes": ["5XX"], "retryConnectionErrors": true}
x-speakeasy-globals: {"parameters": [{"$ref": "#/components/parameters/ChainId"}, {"$ref": "#/components/parameters/Network"}]}
