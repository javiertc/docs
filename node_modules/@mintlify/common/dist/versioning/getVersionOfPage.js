function getVersionOfPageRecursively(navigation, targetPage, lastVersion) {
    // pathToVersionDict depends on this but doesn't have a / at the start so we need to compare both path varieties
    if (typeof navigation === 'string') {
        return `/${navigation}` === targetPage || navigation === targetPage ? lastVersion : undefined;
    }
    let version = lastVersion;
    if (navigation.version) {
        version = navigation.version;
    }
    if (Array.isArray(navigation)) {
        for (const nav of navigation) {
            const versionFound = getVersionOfPageRecursively(nav, targetPage, version);
            if (versionFound) {
                return versionFound;
            }
        }
    }
    for (const page of navigation.pages) {
        const versionFound = getVersionOfPageRecursively(page, targetPage, version);
        if (versionFound) {
            return versionFound;
        }
    }
}
function getCurrentAnchor(anchors, pathname) {
    return anchors.find((anchor) => {
        return pathname.startsWith(`/${anchor.url}`) || pathname.startsWith(anchor.url);
    });
}
function getCurrentAnchorVersion(anchors, pathname) {
    var _a;
    return (_a = getCurrentAnchor(anchors, pathname)) === null || _a === void 0 ? void 0 : _a.version;
}
function getCurrentTabVersion(tabs, pathname) {
    var _a;
    return (_a = tabs.find((tab) => {
        return pathname.startsWith(`/${tab.url}`) || pathname.startsWith(tab.url);
    })) === null || _a === void 0 ? void 0 : _a.version;
}
export function getVersionOfPage(navigation, anchors, tabs, pathname) {
    var _a;
    for (const group of navigation) {
        const pageVersion = getVersionOfPageRecursively(group, pathname);
        if (pageVersion) {
            return pageVersion;
        }
    }
    return (_a = getCurrentAnchorVersion(anchors, pathname)) !== null && _a !== void 0 ? _a : getCurrentTabVersion(tabs, pathname);
}
