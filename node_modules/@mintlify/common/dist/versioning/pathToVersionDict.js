import { isGroup } from '../navigation/index.js';
import { optionallyRemoveLeadingSlash } from '../optionallyRemoveLeadingSlash.js';
import { getVersionOfPage } from './index.js';
/**
 * Assumes page hrefs in navWithPageContext have a leading / but config page paths do not.
 * Outputted dictionary will NOT have a leading / in the dictionary keys.
 */
export function pathToVersionDict(navWithPageContext, config) {
    let versionDict = {};
    for (const group of navWithPageContext) {
        if (group.pages.length > 0) {
            versionDict = Object.assign(Object.assign({}, versionDict), recursivePathToVersionDict(group.pages, config));
        }
    }
    return versionDict;
}
function recursivePathToVersionDict(navWithPageContext, config) {
    let versionDict = {};
    navWithPageContext.forEach((page) => {
        var _a, _b, _c;
        if (isGroup(page)) {
            if (page.pages.length !== 0) {
                versionDict = Object.assign(Object.assign({}, versionDict), recursivePathToVersionDict(page.pages, config));
            }
        }
        else if (page.href) {
            versionDict[optionallyRemoveLeadingSlash(page.href)] =
                (_a = page.version) !== null && _a !== void 0 ? _a : getVersionOfPage(config.navigation, (_b = config.anchors) !== null && _b !== void 0 ? _b : [], (_c = config.tabs) !== null && _c !== void 0 ? _c : [], page.href);
        }
    });
    return versionDict;
}
