import { promises as _promises } from 'fs';
import fse from 'fs-extra';
import { join } from 'path';
import { getConfigPath } from '../../../utils.js';
import { generateOpenApiAnchorsOrTabs } from './generateOpenApiAnchorsOrTabs.js';
import { validateMintJson } from './validateMintJson.js';
const { readFile } = _promises;
export async function updateMintConfigFile(contentDirectoryPath, openApiFiles) {
    const configPath = await getConfigPath(contentDirectoryPath);
    if (configPath == null) {
        throw Error('Must be run in a directory where a mint.json file exists.');
    }
    const mintConfigContents = await readMintConfigFile(configPath);
    const validationResults = await validateMintJson(mintConfigContents);
    const { mintConfig, pagesAcc, openApiFiles: newOpenApiFiles, } = await generateOpenApiAnchorsOrTabs(validationResults.data, openApiFiles);
    await writeMintConfigFile(mintConfig);
    return { mintConfig, pagesAcc, openApiFiles: newOpenApiFiles };
}
const readMintConfigFile = async (configPath) => {
    let configContents;
    try {
        configContents = await readFile(configPath, 'utf-8');
    }
    catch (err) {
        throw Error(`Unable to read mint.json: ${err}`);
    }
    return configContents;
};
export const writeMintConfigFile = async (deploymentConfig, targetDir) => {
    try {
        await fse.outputFile(join(targetDir ?? '', 'src/_props/mint.json'), JSON.stringify(deploymentConfig, null, 2), {
            flag: 'w',
        });
    }
    catch (err) {
        throw Error(`Unable to write mint.json: ${err}`);
    }
};
export { validateMintJson } from './validateMintJson.js';
export { generateOpenApiAnchorsOrTabs, generateOpenApiAnchorOrTab, } from './generateOpenApiAnchorsOrTabs.js';
