import SwaggerParser from '@apidevtools/swagger-parser';
import { getOpenApiTitleAndDescription, slugToTitle } from '@mintlify/common';
import fse, { outputFile } from 'fs-extra';
import { join } from 'node:path';
import { OpenAPIV3 } from 'openapi-types';
export const generateOpenApiPages = async (pathOrDocument, writeFiles, outDir, outDirBasePath) => {
    const spec = await SwaggerParser.validate(structuredClone(pathOrDocument));
    if (spec.paths === undefined || Object.keys(spec.paths).length === 0) {
        throw new Error('No paths defined.');
    }
    const nav = [];
    const decoratedNav = [];
    const writePromises = [];
    const pagesAcc = {};
    Object.entries(spec.paths).forEach(([path, pathItemObject]) => {
        if (pathItemObject === undefined) {
            return;
        }
        Object.values(OpenAPIV3.HttpMethods).forEach((method) => {
            if (method in pathItemObject) {
                const operation = pathItemObject[method];
                const groupName = operation?.tags?.[0];
                const title = prepareStringToBeValidFilename(operation?.summary) ??
                    `${method}-${prepareStringToBeValidFilename(path)}`;
                const folder = prepareStringToBeValidFilename(groupName) ?? '';
                const base = join(outDir ?? '', folder, title);
                const navGroup = findNavGroup(nav, groupName);
                const decoratedNavGroup = findNavGroup(decoratedNav, groupName);
                const filenameWithoutExtension = generateUniqueFilenameWithoutExtension(navGroup, base);
                const openapiMetaTag = `${method} ${path}`;
                const { title: titleTag, description } = getOpenApiTitleAndDescription([{ filename: 'filler-filename', spec }], openapiMetaTag);
                navGroup.push(filenameWithoutExtension);
                const page = {
                    openapi: openapiMetaTag,
                    href: join('/', filenameWithoutExtension),
                    title: titleTag ?? slugToTitle(filenameWithoutExtension),
                    description,
                };
                decoratedNavGroup.push(page);
                pagesAcc[filenameWithoutExtension] = page;
                const targetPath = outDirBasePath
                    ? join(outDirBasePath, `${filenameWithoutExtension}.mdx`)
                    : `${filenameWithoutExtension}.mdx`;
                if (writeFiles && !fse.pathExistsSync(targetPath)) {
                    writePromises.push(createOpenApiFrontmatter(targetPath, method, path));
                }
            }
        });
    });
    await Promise.all(writePromises);
    return {
        nav,
        decoratedNav,
        spec,
        pagesAcc,
    };
};
// returns the group with the given group name, or the top-level group if no group name is provided
const findNavGroup = (nav, groupName) => {
    if (groupName === undefined) {
        groupName = 'API Reference';
    }
    const group = nav.find((fileOrGroup) => typeof fileOrGroup === 'object' && 'group' in fileOrGroup && fileOrGroup.group === groupName);
    if (group === undefined) {
        const newGroup = {
            group: groupName,
            pages: [],
        };
        nav.push(newGroup);
        return newGroup.pages;
    }
    else {
        return group.pages;
    }
};
// returns a filename that is unique within the given array of pages
const generateUniqueFilenameWithoutExtension = (pages, base) => {
    let filename = base;
    if (pages.includes(filename)) {
        let extension = 1;
        filename = `${base}-${extension}`;
        while (pages.includes(filename)) {
            extension += 1;
            filename = `${base}-${extension}`;
        }
    }
    return filename;
};
const createOpenApiFrontmatter = async (filename, method, path) => {
    const data = `---
openapi: ${method} ${path}
---`;
    await outputFile(filename, data);
};
export const prepareStringToBeValidFilename = (str) => str
    ? str
        .replaceAll(' ', '-')
        .replace(/\{.*?\}/g, '-') // remove path parameters
        .replace(/^-/, '')
        .replace(/-$/, '')
        .replace(/[{}(),.'\n\/]/g, '') // remove special characters
        .replaceAll(/--/g, '-') // replace double hyphens
        .toLowerCase()
    : undefined;
//# sourceMappingURL=generateOpenApiPages.js.map