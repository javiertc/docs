import axios from 'axios';
import { getHtmlWithPuppeteer } from '../browser.js';
import { detectFramework, frameworks } from './detectFramework.js';
import { scrapePage } from './scrapePage.js';
import { scrapeIntercomPage } from './site-scrapers/Intercom/scrapeIntercomPage.js';
import { scrapeDocusaurusPage } from './site-scrapers/scrapeDocusaurusPage.js';
import { scrapeGitBookPage } from './site-scrapers/scrapeGitBookPage.js';
import { scrapeReadMePage } from './site-scrapers/scrapeReadMePage.js';
function validateFramework(framework) {
    if (!framework) {
        console.log(`Could not detect the framework automatically. Please use the -t flag to specify one of: ${frameworks.join(', ')}`);
        return process.exit(1);
    }
}
export async function scrapePageWrapper(url, overwrite, scrapeFunc, options) {
    let html;
    if (options?.puppeteer) {
        html = await getHtmlWithPuppeteer(url);
    }
    else {
        const res = await axios.get(url);
        html = res.data;
    }
    await scrapePage(scrapeFunc, url, html, overwrite, options?.version);
    process.exit(0);
}
export async function scrapePageAutomatically(url, overwrite, frameworkHint) {
    const res = await axios.get(url);
    const html = res.data;
    frameworkHint = frameworkHint.framework ? frameworkHint : detectFramework(html);
    validateFramework(frameworkHint.framework);
    console.log('Detected framework: ' + frameworkHint.framework);
    switch (frameworkHint.framework) {
        case 'docusaurus':
            await scrapePageWrapper(url, overwrite, scrapeDocusaurusPage, {
                version: frameworkHint.version,
            });
            break;
        case 'gitbook':
            await scrapePageWrapper(url, overwrite, scrapeGitBookPage, { puppeteer: true });
            break;
        case 'readme':
            await scrapePageWrapper(url, overwrite, scrapeReadMePage);
            break;
        case 'intercom':
            await scrapePageWrapper(url, overwrite, scrapeIntercomPage);
            break;
    }
}
//# sourceMappingURL=scrapePageCommands.js.map