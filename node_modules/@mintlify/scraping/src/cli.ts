#!/usr/bin/env node
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

import { checkUrl, checkVersion } from './checks.js';
import { generateOpenApiPages } from './openapi/generateOpenApiPages.js';
import { FrameworkHint, frameworks } from './scraping/detectFramework.js';
import { scrapePageAutomatically } from './scraping/scrapePageCommands.js';
import { scrapeSectionAutomatically } from './scraping/scrapeSectionCommands.js';

await yargs(hideBin(process.argv))
  .command(
    'page <url>',
    'Scrapes a page',
    (yargs) =>
      yargs
        .positional('url', { type: 'string', demandOption: true })
        .check(checkUrl)
        .option('overwrite', { alias: 'O', type: 'boolean', default: false })
        .option('tool', { alias: 't', choices: frameworks })
        .option('docusaurusVersion', {
          alias: 'd',
          type: 'string',
          choices: ['1', '2', '3'] as const,
        })
        .check(checkVersion),
    async ({ url, overwrite, tool, docusaurusVersion }) => {
      const frameworkHint: FrameworkHint = {
        framework: tool,
        version: docusaurusVersion ?? '3',
      };

      await scrapePageAutomatically(url, overwrite, frameworkHint);
    }
  )
  .command(
    'section <url>',
    'Scrapes the docs in the section',
    (yargs) =>
      yargs
        .positional('url', { type: 'string', demandOption: true })
        .check(checkUrl)
        .option('overwrite', { alias: 'O', type: 'boolean', default: false })
        .option('tool', { alias: 't', choices: frameworks })
        .option('docusaurusVersion', {
          alias: 'd',
          type: 'string',
          choices: ['1', '2', '3'] as const,
        })
        .check(checkVersion),
    async ({ url, overwrite, tool, docusaurusVersion }) => {
      const frameworkHint: FrameworkHint = {
        framework: tool,
        version: docusaurusVersion ?? '3',
      };

      await scrapeSectionAutomatically(url, overwrite, frameworkHint);
    }
  )
  .command(
    'openapi-file <openapiFilename>',
    'Creates MDX files from an OpenAPI spec',
    (yargs) =>
      yargs
        .positional('openapiFilename', {
          describe: 'The filename of the OpenAPI spec',
          type: 'string',
          demandOption: true,
        })
        .option('writeFiles', {
          describe: 'Whether or not to write the frontmatter files',
          default: true,
          type: 'boolean',
          alias: 'w',
        })
        .option('outDir', {
          describe: 'The folder in which to write any created frontmatter files',
          type: 'string',
          alias: 'o',
        }),
    async (argv) => {
      try {
        const { nav } = await generateOpenApiPages(
          argv.openapiFilename,
          argv.writeFiles,
          argv.outDir
        );
        console.log('navigation object suggestion:');
        console.log(JSON.stringify(nav, undefined, 2));
      } catch (error) {
        if (error instanceof Error) {
          console.error(error.message);
        } else {
          console.error(error);
        }
      }
    }
  )
  // Print the help menu when the user enters an invalid command.
  .strictCommands()
  .demandCommand(1, 'Unknown command. See above for the list of supported commands.')

  // Alias option flags --help = -h, --version = -v
  .alias('h', 'help')
  .alias('v', 'version')

  .parse();
