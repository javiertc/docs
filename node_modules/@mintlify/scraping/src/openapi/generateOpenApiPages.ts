import SwaggerParser from '@apidevtools/swagger-parser';
import { getOpenApiTitleAndDescription, slugToTitle } from '@mintlify/common';
import type {
  DecoratedNavigation,
  DecoratedNavigationGroup,
  Navigation,
  NavigationEntry,
  NavigationGroup,
  DecoratedNavigationPage,
} from '@mintlify/models';
import fse, { outputFile } from 'fs-extra';
import { join } from 'node:path';
import { OpenAPI, OpenAPIV3 } from 'openapi-types';

export const generateOpenApiPages = async (
  pathOrDocument: string | OpenAPI.Document,
  writeFiles?: boolean,
  outDir?: string,
  outDirBasePath?: string
): Promise<{
  nav: Navigation;
  decoratedNav: DecoratedNavigation;
  spec: OpenAPI.Document;
  pagesAcc: Record<string, DecoratedNavigationPage>;
}> => {
  const spec = await SwaggerParser.validate(structuredClone(pathOrDocument));
  if (spec.paths === undefined || Object.keys(spec.paths).length === 0) {
    throw new Error('No paths defined.');
  }

  const nav: Navigation = [];
  const decoratedNav: DecoratedNavigation = [];
  const writePromises: Promise<void>[] = [];
  const pagesAcc: Record<string, DecoratedNavigationPage> = {};
  Object.entries(spec.paths).forEach(([path, pathItemObject]) => {
    if (pathItemObject === undefined) {
      return;
    }
    Object.values(OpenAPIV3.HttpMethods).forEach((method) => {
      if (method in pathItemObject) {
        const operation = pathItemObject[method];
        const groupName = operation?.tags?.[0];
        const title =
          prepareStringToBeValidFilename(operation?.summary) ??
          `${method}-${prepareStringToBeValidFilename(path)}`;
        const folder = prepareStringToBeValidFilename(groupName) ?? '';
        const base = join(outDir ?? '', folder, title);

        const navGroup = findNavGroup<NavigationGroup>(nav, groupName);
        const decoratedNavGroup = findNavGroup<DecoratedNavigationGroup>(decoratedNav, groupName);

        const filenameWithoutExtension = generateUniqueFilenameWithoutExtension(navGroup, base);
        const openapiMetaTag = `${method} ${path}`;
        const { title: titleTag, description } = getOpenApiTitleAndDescription(
          [{ filename: 'filler-filename', spec }],
          openapiMetaTag
        );
        navGroup.push(filenameWithoutExtension);
        const page: DecoratedNavigationPage = {
          openapi: openapiMetaTag,
          href: join('/', filenameWithoutExtension),
          title: titleTag ?? slugToTitle(filenameWithoutExtension),
          description,
        };
        decoratedNavGroup.push(page);
        pagesAcc[filenameWithoutExtension] = page;
        const targetPath = outDirBasePath
          ? join(outDirBasePath, `${filenameWithoutExtension}.mdx`)
          : `${filenameWithoutExtension}.mdx`;
        if (writeFiles && !fse.pathExistsSync(targetPath)) {
          writePromises.push(createOpenApiFrontmatter(targetPath, method, path));
        }
      }
    });
  });

  await Promise.all(writePromises);

  return {
    nav,
    decoratedNav,
    spec,
    pagesAcc,
  };
};

// returns the group with the given group name, or the top-level group if no group name is provided
const findNavGroup = <T extends NavigationGroup | DecoratedNavigationGroup>(
  nav: T['pages'][number][],
  groupName?: string
): T['pages'][number][] => {
  if (groupName === undefined) {
    groupName = 'API Reference';
  }
  const group = nav.find(
    (fileOrGroup) =>
      typeof fileOrGroup === 'object' && 'group' in fileOrGroup && fileOrGroup.group === groupName
  ) as T | undefined;
  if (group === undefined) {
    const newGroup = {
      group: groupName,
      pages: [],
    };
    nav.push(newGroup);
    return newGroup.pages;
  } else {
    return group.pages;
  }
};

// returns a filename that is unique within the given array of pages
const generateUniqueFilenameWithoutExtension = (pages: NavigationEntry[], base: string): string => {
  let filename = base;
  if (pages.includes(filename)) {
    let extension = 1;
    filename = `${base}-${extension}`;
    while (pages.includes(filename)) {
      extension += 1;
      filename = `${base}-${extension}`;
    }
  }
  return filename;
};

const createOpenApiFrontmatter = async (
  filename: string,
  method: OpenAPIV3.HttpMethods,
  path: string
) => {
  const data = `---
openapi: ${method} ${path}
---`;

  await outputFile(filename, data);
};

export const prepareStringToBeValidFilename = (str?: string) =>
  str
    ? str
        .replaceAll(' ', '-')
        .replace(/\{.*?\}/g, '-') // remove path parameters
        .replace(/^-/, '')
        .replace(/-$/, '')
        .replace(/[{}(),.'\n\/]/g, '') // remove special characters
        .replaceAll(/--/g, '-') // replace double hyphens
        .toLowerCase()
    : undefined;
