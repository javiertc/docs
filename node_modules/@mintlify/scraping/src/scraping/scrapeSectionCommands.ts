import axios from 'axios';
import { Page } from 'puppeteer';

import { startBrowser } from '../browser.js';
import { getOrigin } from '../util.js';
import { detectFramework, Framework, FrameworkHint } from './detectFramework.js';
import { ScrapeSectionFn, scrapeSection } from './scrapeSection.js';
import { scrapeIntercomSection } from './site-scrapers/Intercom/scrapeIntercomSection.js';
import openNestedDocusaurusMenus from './site-scrapers/openNestedDocusaurusMenus.js';
import openNestedGitbookMenus from './site-scrapers/openNestedGitbookMenus.js';
import { scrapeDocusaurusSection } from './site-scrapers/scrapeDocusaurusSection.js';
import { scrapeGitBookSection } from './site-scrapers/scrapeGitBookSection.js';
import { scrapeReadMeSection } from './site-scrapers/scrapeReadMeSection.js';

export async function scrapeSectionAxiosWrapper(
  url: string,
  overwrite: boolean,
  scrapeFunc: ScrapeSectionFn
) {
  const res = await axios.get(url);
  const html = res.data;
  await scrapeSection(scrapeFunc, html, getOrigin(url), overwrite, undefined);
  process.exit(0);
}

export async function scrapeDocusaurusSectionCommand(
  url: string,
  overwrite: boolean,
  version: string | undefined // "1" | "2" | "3"
) {
  await scrapeSectionOpeningAllNested(
    url,
    overwrite,
    openNestedDocusaurusMenus,
    scrapeDocusaurusSection,
    version
  );
}

export async function scrapeGitbookSectionCommand(url: string, overwrite: boolean) {
  await scrapeSectionOpeningAllNested(url, overwrite, openNestedGitbookMenus, scrapeGitBookSection);
}

async function scrapeSectionOpeningAllNested(
  url: string,
  overwrite: boolean,
  openLinks: (page: Page) => Promise<string>,
  scrapeFunc: ScrapeSectionFn,
  version?: string
) {
  const browser = await startBrowser();
  const page = await browser.newPage();
  await page.goto(url, {
    waitUntil: 'networkidle2',
  });

  const html = await openLinks(page);
  void browser.close();
  await scrapeSection(scrapeFunc, html, getOrigin(url), overwrite, version);
  process.exit(0);
}

export async function scrapeSectionAutomatically(
  url: string,
  overwrite: boolean,
  frameworkHint: FrameworkHint
) {
  const res = await axios.get(url);
  const html = res.data;
  frameworkHint = frameworkHint.framework ? frameworkHint : detectFramework(html);

  validateFramework(frameworkHint.framework);
  console.log('Detected framework: ' + frameworkHint.framework);

  switch (frameworkHint.framework) {
    case 'docusaurus':
      await scrapeDocusaurusSectionCommand(url, overwrite, frameworkHint.version);
      break;
    case 'gitbook':
      await scrapeGitbookSectionCommand(url, overwrite);
      break;
    case 'readme':
      await scrapeSectionAxiosWrapper(url, overwrite, scrapeReadMeSection);
      break;
    case 'intercom':
      await scrapeSectionAxiosWrapper(url, overwrite, scrapeIntercomSection);
      break;
  }
}

function validateFramework(framework: Framework | undefined) {
  if (!framework) {
    console.log(
      'Could not detect the framework automatically. We only support Docusaurus (V2 and V3), GitBook, and ReadMe.'
    );
    process.exit();
  }
}
